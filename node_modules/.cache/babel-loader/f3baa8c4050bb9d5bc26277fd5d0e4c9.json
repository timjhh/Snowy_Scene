{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Cube-Sounds\\\\src\\\\Cube.jsx\";\nimport './App.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as THREE from 'three';\nimport * as Tone from 'tone';\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cube(props) {\n  function main() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement); // L/W/H of the box - how far does a cube travel before resetting\n\n    const max = 8; // Create standard box geometry\n\n    var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var bb = new THREE.BoxGeometry(max * Math.E, max * Math.E, max * Math.E); // var bb = new THREE.SphereGeometry(max*Math.E*2,max*Math.E,max*Math.E);\n    //var bb = new THREE.SphereGeometry();\n\n    var sphere = new THREE.SphereGeometry(max + 0.25);\n    var object = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.4\n    }));\n    var box = new THREE.BoxHelper(object);\n    scene.add(box);\n    scene.add(object);\n    const clock = new THREE.Clock(); // Create bounding box render\n\n    const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff);\n    scene.add(bound);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.z = 15;\n    var dx = 0.05;\n    var dy = 0.05;\n    var dz = 0.05; // scale_len = the length of any major or minor scale\n\n    var scale_len = props.scaleRef.current.length; //var max_speed = 0.002;\n    // Define base and max speed\n    // Then, generate a scalar up to max to multiply the base by\n\n    var max_mult = 5;\n    var min_speed = props.speed; // Each note timing can range from 1-256\n    // This can be represented as a random power of 2 as\n    // 2**8 == 256 and 2**0 == 1\n\n    const max_note_len = 8; // What is the maximum pitch notes can play at\n\n    const max_pitch = 4; // What is the minimum pitch notes can play at\n\n    const min_pitch = 2; // Notes can be represented by:\n    // n - regular note\n    // t - triplet\n    // n. - dotted note\n    // e.g. 4n. is a dotted quarter note\n\n    const note_types = ['n', 't'];\n    var cubes = [];\n    const reverb = new Tone.Reverb(2);\n    const delay = new Tone.PingPongDelay(\"8n\", 0.2);\n    const env = new Tone.Envelope(0.4);\n    const vibrato = new Tone.Vibrato();\n    const compressor = new Tone.Compressor(-30, 1);\n    env.attackCurve = 'sine'; //env.triggerAttack();\n\n    for (var i = 0; i < props.numCubes; i++) {\n      const material = new THREE.MeshBasicMaterial({\n        color: props.color(i)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cubes[i] = cube; // Random note, pitch and length generation\n\n      let randNote = Math.floor(Math.random() * scale_len);\n      let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\n      let randLen = 2 ** Math.floor(Math.random() * max_note_len);\n      let type_idx = Math.floor(Math.random() * note_types.length);\n      cubes[i].minSpeed = props.speedRef.current;\n      cubes[i].note = props.scaleRef.current[randNote] + randPitch;\n      cubes[i].note_len = randLen + note_types[type_idx];\n      cubes[i].synth = new Tone.MembraneSynth(); //cubes[i].synth = new Tone.FMSynth();\n      //cubes[i].synth = new Tone.Synth();\n      //cubes[i].synth.chain(vibrato, reverb, compressor, Tone.Destination);\n\n      cubes[i].synth.chain(compressor, Tone.Destination); // Define more random values :)\n      // Once the cube's counter reaches an arbitrary maximum, switch notes\n\n      cubes[i].counter = 0; // How many times can a note repeat before changing\n      //cubes[i].max_repeats = (Math.ceil((Math.random() * 8))+1);\n\n      cubes[i].max_repeats = 6;\n      cubes[i].dx = cubes[i].minSpeed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dy = 0;\n      cubes[i].dz = 0;\n      const center = new THREE.Vector3();\n      cubes[i].dist = new THREE.Vector3(cubes[i].dx, cubes[i].dy, cubes[i].dz);\n      scene.add(cube);\n    }\n\n    function animate() {\n      // Check for start button to be pressed before allowing animation\n      if (props.startRef.current) {\n        cubes.forEach(function (d, idx) {\n          d.rotation.x += dx;\n          d.rotation.y += dx; //const synth = new Tone.Synth().toDestination();\n          // if(Math.abs(d.position.x) >= max) {\n          //   d.counter++;\n          //   d.position.x = 0;\n          //   d.position.y = 0;\n          //   d.position.z = 0;\n          //   d.synth.triggerAttackRelease(d.note, d.note_len);\n          // }\n\n          if (d.dist.length() >= max) {\n            d.counter++;\n            d.position.x = 0;\n            d.position.y = 0;\n            d.position.z = 0;\n            d.synth.triggerAttackRelease(d.note, d.note_len);\n          } // Trigger a note re-association after a number of repeats\n\n\n          if (d.counter >= d.max_repeats) {\n            d.note = (props.scaleRef.current[i % scale_len] + (Math.floor(Math.random() * max_pitch) + min_pitch)).toString();\n            d.counter = 0;\n          }\n\n          if (d.minSpeed != props.speedRef.current) {\n            d.position.x = 0;\n            d.minSpeed = props.speedRef.current;\n            d.dx = d.minSpeed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n          }\n\n          d.position.x += d.dx;\n          d.position.y += d.dy;\n          d.position.z += d.dz;\n          d.dist.x = d.position.x;\n          d.dist.y = d.position.y;\n          d.dist.z = d.position.z; //sphere.material.opacity = 0.5 * (1 + Math.sin( clock.getElapsedTime() ) );\n        });\n      }\n\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  window.onload = main;\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Cube;\nexport default _c2 = /*#__PURE__*/React.memo(Cube);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Cube-Sounds/src/Cube.jsx"],"names":["OrbitControls","THREE","Tone","React","useEffect","Cube","props","main","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","max","geometry","BoxGeometry","bb","Math","E","sphere","SphereGeometry","object","Mesh","MeshBasicMaterial","color","transparent","opacity","box","BoxHelper","add","clock","Clock","bound","controls","position","z","dx","dy","dz","scale_len","scaleRef","current","length","max_mult","min_speed","speed","max_note_len","max_pitch","min_pitch","note_types","cubes","reverb","Reverb","delay","PingPongDelay","env","Envelope","vibrato","Vibrato","compressor","Compressor","attackCurve","i","numCubes","material","cube","randNote","floor","random","randPitch","randLen","type_idx","minSpeed","speedRef","note","note_len","synth","MembraneSynth","chain","Destination","counter","max_repeats","ceil","center","Vector3","dist","animate","startRef","forEach","d","idx","rotation","x","y","triggerAttackRelease","toString","requestAnimationFrame","render","onload","memo"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as THREE from 'three';\r\nimport * as Tone from 'tone';\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction Cube(props) {\r\n\r\n\r\n\r\nfunction main() {\r\n\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  document.body.appendChild( renderer.domElement );\r\n\r\n  // L/W/H of the box - how far does a cube travel before resetting\r\n  const max = 8;\r\n\r\n  // Create standard box geometry\r\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\r\n\r\n\r\n  var bb = new THREE.BoxGeometry(max*Math.E,max*Math.E,max*Math.E);\r\n  // var bb = new THREE.SphereGeometry(max*Math.E*2,max*Math.E,max*Math.E);\r\n  //var bb = new THREE.SphereGeometry();\r\n\r\n\r\nvar sphere = new THREE.SphereGeometry(max+0.25);\r\nvar object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.4 }) );\r\nvar box = new THREE.BoxHelper( object );\r\nscene.add(box);\r\nscene.add(object);\r\n\r\nconst clock = new THREE.Clock();\r\n\r\n  // Create bounding box render\r\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\r\n\r\n  scene.add(bound);\r\n\r\n  const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n  camera.position.z = 15;\r\n\r\n\r\n  var dx = 0.05;\r\n  var dy = 0.05;\r\n  var dz = 0.05;\r\n\r\n  // scale_len = the length of any major or minor scale\r\n  var scale_len = props.scaleRef.current.length;\r\n  //var max_speed = 0.002;\r\n\r\n  // Define base and max speed\r\n  // Then, generate a scalar up to max to multiply the base by\r\n  var max_mult = 5;\r\n  var min_speed = props.speed;\r\n  \r\n  // Each note timing can range from 1-256\r\n  // This can be represented as a random power of 2 as\r\n  // 2**8 == 256 and 2**0 == 1\r\n  const max_note_len = 8;\r\n  // What is the maximum pitch notes can play at\r\n  const max_pitch = 4;\r\n  // What is the minimum pitch notes can play at\r\n  const min_pitch = 2;\r\n\r\n  // Notes can be represented by:\r\n  // n - regular note\r\n  // t - triplet\r\n  // n. - dotted note\r\n  // e.g. 4n. is a dotted quarter note\r\n  const note_types = ['n','t'];\r\n  \r\n\r\n  var cubes = [];\r\n\r\n  const reverb = new Tone.Reverb(2);\r\n  const delay = new Tone.PingPongDelay(\"8n\", 0.2);\r\n  const env = new Tone.Envelope(0.4);\r\n  const vibrato = new Tone.Vibrato();\r\n  const compressor = new Tone.Compressor(-30, 1);\r\n\r\n  env.attackCurve = 'sine';\r\n  //env.triggerAttack();\r\n\r\n  for(var i = 0; i < props.numCubes; i++) {\r\n\r\n\r\n    const material = new THREE.MeshBasicMaterial( { \r\n      color: props.color(i) } );\r\n\r\n    const cube = new THREE.Mesh( geometry, material );\r\n    cubes[i] = cube;\r\n\r\n\r\n    // Random note, pitch and length generation\r\n    let randNote = Math.floor(Math.random() * scale_len);\r\n    let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\r\n    let randLen = 2 ** Math.floor(Math.random() * max_note_len);\r\n    let type_idx = Math.floor(Math.random() * note_types.length);\r\n    \r\n    cubes[i].minSpeed = props.speedRef.current;\r\n\r\n    cubes[i].note = (props.scaleRef.current[randNote] + randPitch);\r\n\r\n    cubes[i].note_len = (randLen + note_types[type_idx]);\r\n\r\n    cubes[i].synth = new Tone.MembraneSynth();\r\n    //cubes[i].synth = new Tone.FMSynth();\r\n    //cubes[i].synth = new Tone.Synth();\r\n\r\n    //cubes[i].synth.chain(vibrato, reverb, compressor, Tone.Destination);\r\n    cubes[i].synth.chain(compressor, Tone.Destination);\r\n\r\n    // Define more random values :)\r\n    // Once the cube's counter reaches an arbitrary maximum, switch notes\r\n    cubes[i].counter = 0;\r\n\r\n    // How many times can a note repeat before changing\r\n    //cubes[i].max_repeats = (Math.ceil((Math.random() * 8))+1);\r\n    cubes[i].max_repeats = 6;\r\n\r\n    cubes[i].dx = cubes[i].minSpeed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n    cubes[i].dy = 0;\r\n    cubes[i].dz = 0;\r\n\r\n\r\n    const center = new THREE.Vector3();\r\n    cubes[i].dist = new THREE.Vector3(cubes[i].dx,cubes[i].dy,cubes[i].dz);\r\n\r\n    scene.add(cube);  \r\n\r\n  }\r\n\r\n\r\n  function animate() {\r\n\r\n    // Check for start button to be pressed before allowing animation\r\n    if(props.startRef.current) {\r\n\r\n      cubes.forEach(function(d,idx) {\r\n\r\n      d.rotation.x += dx;\r\n      d.rotation.y += dx;\r\n\r\n      //const synth = new Tone.Synth().toDestination();\r\n\r\n      // if(Math.abs(d.position.x) >= max) {\r\n      //   d.counter++;\r\n      //   d.position.x = 0;\r\n      //   d.position.y = 0;\r\n      //   d.position.z = 0;\r\n      //   d.synth.triggerAttackRelease(d.note, d.note_len);\r\n\r\n      // }\r\n      if(d.dist.length() >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, d.note_len);\r\n\r\n      }\r\n\r\n\r\n      // Trigger a note re-association after a number of repeats\r\n      if(d.counter >= d.max_repeats) {\r\n        d.note = (props.scaleRef.current[i % scale_len] + (Math.floor(Math.random() * max_pitch) + min_pitch)).toString();\r\n        d.counter = 0;\r\n      }\r\n      if(d.minSpeed != props.speedRef.current) {\r\n        d.position.x = 0;\r\n        d.minSpeed = props.speedRef.current;\r\n        d.dx = d.minSpeed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n      }\r\n\r\n      d.position.x += d.dx;\r\n      d.position.y += d.dy;\r\n      d.position.z += d.dz;\r\n\r\n      d.dist.x = d.position.x;\r\n      d.dist.y = d.position.y;\r\n      d.dist.z = d.position.z;\r\n\r\n\r\n\r\n      //sphere.material.opacity = 0.5 * (1 + Math.sin( clock.getElapsedTime() ) );\r\n\r\n\r\n    });\r\n\r\n    }\r\n    requestAnimationFrame( animate );\r\n    renderer.render( scene, camera );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n}\r\n\r\nwindow.onload = main;\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n    </div> \r\n  \r\n  );\r\n}\r\n\r\nexport default React.memo(Cube);"]},"metadata":{},"sourceType":"module"}