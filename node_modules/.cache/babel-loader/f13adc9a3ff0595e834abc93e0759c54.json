{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Cube-Sounds\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as d3 from 'd3';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var options = {\n    note: 'A',\n    mode: \"Major\",\n    tempo: 90,\n    scale: [],\n    speed: 0.002\n  };\n  const [mode, setMode] = useState(options.mode);\n  const [note, setNote] = useState(options.note);\n  const [tempo, setTempo] = useState(options.tempo);\n  let [scale, setScale] = useState(options.scale);\n  let start = false;\n  let range = [0, 9]; // Control the current scale we're playing in\n\n  const scaleRef = React.useRef(options.scale); // Correctly start the simulation/audio\n\n  const startRef = React.useRef(start); // Control the minimum speed of cubes\n\n  const speedRef = React.useRef(options.speed); // Control the range of notes available to modify\n\n  const rangeRef = React.useRef(range);\n  let numCubes = 6; // Define some music theory terms\n  // Starting at 'C0' and ending at 'G#9'\n\n  const min = 1;\n  const max = 9;\n  const modes = ['Major', 'Minor'];\n  const notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']; // W - Whole step\n  // H - Half step\n  // 'Final' notes are omitted to avoid duplicates i.e. C major ends at B, not C\n  // Major scales follow the pattern of W-W-H-W-W-W-H\n\n  const major = [0, 2, 4, 5, 7, 9, 11]; // Minor scales follow the pattern of W-H-W-W-H-W-W\n\n  const minor = [0, 2, 3, 5, 7, 8, 10]; // On change, calculate a new scale with input values\n\n  function appOnChange() {\n    options.scale = [];\n    let arr = mode === \"Major\" ? major : minor;\n    let start = notes.indexOf(note);\n    arr.forEach(function (d) {\n      options.scale.push(notes[(d + start) % notes.length]);\n    });\n    scaleRef.current = options.scale;\n  }\n\n  async function initAudio() {\n    await Tone.start();\n    startRef.current = true;\n    console.log(\"Audio initialized\");\n  } // Discrete color scheme\n\n\n  let colorC = d => d3.schemePaired[d % 10];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Cube Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Cube, {\n        color: colorC,\n        numCubes: numCubes,\n        tone: Tone,\n        scaleRef: scaleRef,\n        startRef: startRef,\n        speedRef: speedRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        onChange: appOnChange(),\n        modes: modes,\n        mode: mode,\n        note: note,\n        setNote: setNote,\n        notes: notes,\n        setMode: setMode,\n        speedRef: speedRef,\n        rangeRef: rangeRef,\n        setNote: setNote,\n        initAudio: initAudio,\n        startRef: startRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Wt9KhgX4keqJY+6U635bORque4w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Cube-Sounds/src/App.js"],"names":["Tone","React","useState","d3","Legend","Cube","App","options","note","mode","tempo","scale","speed","setMode","setNote","setTempo","setScale","start","range","scaleRef","useRef","startRef","speedRef","rangeRef","numCubes","min","max","modes","notes","major","minor","appOnChange","arr","indexOf","forEach","d","push","length","current","initAudio","console","log","colorC","schemePaired"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nfunction App() {\r\n\r\n\r\n  var options = {\r\n    note: 'A',\r\n    mode: \"Major\",\r\n    tempo: 90,\r\n    scale: [],\r\n    speed: 0.002,\r\n  };\r\n\r\n\r\n  const [mode, setMode] = useState(options.mode);\r\n  const [note, setNote] = useState(options.note);\r\n  const [tempo, setTempo] = useState(options.tempo);\r\n  let [scale, setScale] = useState(options.scale);\r\n  let start = false;\r\n  let range = [0,9];\r\n\r\n  // Control the current scale we're playing in\r\n  const scaleRef = React.useRef(options.scale);\r\n  // Correctly start the simulation/audio\r\n  const startRef = React.useRef(start);\r\n  // Control the minimum speed of cubes\r\n  const speedRef = React.useRef(options.speed);\r\n  // Control the range of notes available to modify\r\n  const rangeRef = React.useRef(range);\r\n\r\n\r\n\r\n  let numCubes = 6;\r\n\r\n  // Define some music theory terms\r\n  // Starting at 'C0' and ending at 'G#9'\r\n  const min = 1;\r\n  const max = 9;\r\n\r\n  const modes = ['Major', 'Minor'];\r\n  const notes = ['A','A#','B','C','C#','D','D#','E','F','F#','G','G#'];\r\n\r\n  // W - Whole step\r\n  // H - Half step\r\n  // 'Final' notes are omitted to avoid duplicates i.e. C major ends at B, not C\r\n\r\n  // Major scales follow the pattern of W-W-H-W-W-W-H\r\n  const major = [0,2,4,5,7,9,11];\r\n\r\n  // Minor scales follow the pattern of W-H-W-W-H-W-W\r\n  const minor = [0,2,3,5,7,8,10]; \r\n\r\n  \r\n  // On change, calculate a new scale with input values\r\n  function appOnChange() {\r\n  options.scale = [];\r\n  let arr = (mode === \"Major\") ? major : minor;\r\n  let start = notes.indexOf(note);\r\n\r\n  arr.forEach(function(d) {\r\n\r\n    options.scale.push(notes[((d + start) % notes.length)]);\r\n     });\r\n\r\n  scaleRef.current = options.scale;\r\n\r\n}\r\n\r\nasync function initAudio() {\r\n\r\n  await Tone.start();\r\n  startRef.current = true;\r\n  console.log(\"Audio initialized\");\r\n\r\n}\r\n\r\n  // Discrete color scheme\r\n  let colorC = (d) => d3.schemePaired[d % 10];\r\n\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Cube Notes</title>\r\n\r\n    </head>\r\n\r\n    <div className=\"App\">\r\n\r\n        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Legend onChange = {appOnChange()}\r\n          modes={modes}\r\n          mode={mode}\r\n          note={note}\r\n          setNote={setNote}\r\n          notes={notes}\r\n          setMode={setMode}\r\n          speedRef={speedRef}\r\n          rangeRef={rangeRef}\r\n          setNote={setNote}\r\n          initAudio={initAudio}\r\n          startRef={startRef}\r\n\r\n          />\r\n\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}