{"ast":null,"code":"(function () {\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n  //\n  //    Orbit - left mouse / touch: one-finger move\n  //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n  //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n  const _changeEvent = {\n    type: 'change'\n  };\n  const _startEvent = {\n    type: 'start'\n  };\n  const _endEvent = {\n    type: 'end'\n  };\n\n  class OrbitControls extends THREE.EventDispatcher {\n    constructor(object, domElement) {\n      super();\n      if (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.');\n      if (domElement === document) console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      this.object = object;\n      this.domElement = domElement;\n      this.domElement.style.touchAction = 'none'; // disable touch scroll\n      // Set to false to disable this control\n\n      this.enabled = true; // \"target\" sets the location of focus, where the object orbits around\n\n      this.target = new THREE.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )\n\n      this.minDistance = 0;\n      this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )\n\n      this.minZoom = 0;\n      this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.\n      // Range is 0 to Math.PI radians.\n\n      this.minPolarAngle = 0; // radians\n\n      this.maxPolarAngle = Math.PI; // radians\n      // How far you can orbit horizontally, upper and lower limits.\n      // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\n      this.minAzimuthAngle = -Infinity; // radians\n\n      this.maxAzimuthAngle = Infinity; // radians\n      // Set to true to enable damping (inertia)\n      // If damping is enabled, you must call controls.update() in your animation loop\n\n      this.enableDamping = false;\n      this.dampingFactor = 0.05; // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n      // Set to false to disable zooming\n\n      this.enableZoom = true;\n      this.zoomSpeed = 1.0; // Set to false to disable rotating\n\n      this.enableRotate = true;\n      this.rotateSpeed = 1.0; // Set to false to disable panning\n\n      this.enablePan = true;\n      this.panSpeed = 1.0;\n      this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\n      this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n      // Set to true to automatically rotate around the target\n      // If auto-rotate is enabled, you must call controls.update() in your animation loop\n\n      this.autoRotate = false;\n      this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n      // The four arrow keys\n\n      this.keys = {\n        LEFT: 'ArrowLeft',\n        UP: 'ArrowUp',\n        RIGHT: 'ArrowRight',\n        BOTTOM: 'ArrowDown'\n      }; // Mouse buttons\n\n      this.mouseButtons = {\n        LEFT: THREE.MOUSE.ROTATE,\n        MIDDLE: THREE.MOUSE.DOLLY,\n        RIGHT: THREE.MOUSE.PAN\n      }; // Touch fingers\n\n      this.touches = {\n        ONE: THREE.TOUCH.ROTATE,\n        TWO: THREE.TOUCH.DOLLY_PAN\n      }; // for reset\n\n      this.target0 = this.target.clone();\n      this.position0 = this.object.position.clone();\n      this.zoom0 = this.object.zoom; // the target DOM element for key events\n\n      this._domElementKeyEvents = null; //\n      // public methods\n      //\n\n      this.getPolarAngle = function () {\n        return spherical.phi;\n      };\n\n      this.getAzimuthalAngle = function () {\n        return spherical.theta;\n      };\n\n      this.getDistance = function () {\n        return this.object.position.distanceTo(this.target);\n      };\n\n      this.listenToKeyEvents = function (domElement) {\n        domElement.addEventListener('keydown', onKeyDown);\n        this._domElementKeyEvents = domElement;\n      };\n\n      this.saveState = function () {\n        scope.target0.copy(scope.target);\n        scope.position0.copy(scope.object.position);\n        scope.zoom0 = scope.object.zoom;\n      };\n\n      this.reset = function () {\n        scope.target.copy(scope.target0);\n        scope.object.position.copy(scope.position0);\n        scope.object.zoom = scope.zoom0;\n        scope.object.updateProjectionMatrix();\n        scope.dispatchEvent(_changeEvent);\n        scope.update();\n        state = STATE.NONE;\n      }; // this method is exposed, but perhaps it would be better if we can make it private...\n\n\n      this.update = function () {\n        const offset = new THREE.Vector3(); // so camera.up is the orbit axis\n\n        const quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n        const quatInverse = quat.clone().invert();\n        const lastPosition = new THREE.Vector3();\n        const lastQuaternion = new THREE.Quaternion();\n        const twoPI = 2 * Math.PI;\n        return function update() {\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target); // rotate offset to \"y-axis-is-up\" space\n\n          offset.applyQuaternion(quat); // angle from z-axis around y-axis\n\n          spherical.setFromVector3(offset);\n\n          if (scope.autoRotate && state === STATE.NONE) {\n            rotateLeft(getAutoRotationAngle());\n          }\n\n          if (scope.enableDamping) {\n            spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n            spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n          } else {\n            spherical.theta += sphericalDelta.theta;\n            spherical.phi += sphericalDelta.phi;\n          } // restrict theta to be between desired limits\n\n\n          let min = scope.minAzimuthAngle;\n          let max = scope.maxAzimuthAngle;\n\n          if (isFinite(min) && isFinite(max)) {\n            if (min < -Math.PI) min += twoPI;else if (min > Math.PI) min -= twoPI;\n            if (max < -Math.PI) max += twoPI;else if (max > Math.PI) max -= twoPI;\n\n            if (min <= max) {\n              spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n            } else {\n              spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n            }\n          } // restrict phi to be between desired limits\n\n\n          spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n          spherical.makeSafe();\n          spherical.radius *= scale; // restrict radius to be between desired limits\n\n          spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location\n\n          if (scope.enableDamping === true) {\n            scope.target.addScaledVector(panOffset, scope.dampingFactor);\n          } else {\n            scope.target.add(panOffset);\n          }\n\n          offset.setFromSpherical(spherical); // rotate offset back to \"camera-up-vector-is-up\" space\n\n          offset.applyQuaternion(quatInverse);\n          position.copy(scope.target).add(offset);\n          scope.object.lookAt(scope.target);\n\n          if (scope.enableDamping === true) {\n            sphericalDelta.theta *= 1 - scope.dampingFactor;\n            sphericalDelta.phi *= 1 - scope.dampingFactor;\n            panOffset.multiplyScalar(1 - scope.dampingFactor);\n          } else {\n            sphericalDelta.set(0, 0, 0);\n            panOffset.set(0, 0, 0);\n          }\n\n          scale = 1; // update condition is:\n          // min(camera displacement, camera rotation in radians)^2 > EPS\n          // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n          if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n            scope.dispatchEvent(_changeEvent);\n            lastPosition.copy(scope.object.position);\n            lastQuaternion.copy(scope.object.quaternion);\n            zoomChanged = false;\n            return true;\n          }\n\n          return false;\n        };\n      }();\n\n      this.dispose = function () {\n        scope.domElement.removeEventListener('contextmenu', onContextMenu);\n        scope.domElement.removeEventListener('pointerdown', onPointerDown);\n        scope.domElement.removeEventListener('pointercancel', onPointerCancel);\n        scope.domElement.removeEventListener('wheel', onMouseWheel);\n        scope.domElement.removeEventListener('pointermove', onPointerMove);\n        scope.domElement.removeEventListener('pointerup', onPointerUp);\n\n        if (scope._domElementKeyEvents !== null) {\n          scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n        } //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n      }; //\n      // internals\n      //\n\n\n      const scope = this;\n      const STATE = {\n        NONE: -1,\n        ROTATE: 0,\n        DOLLY: 1,\n        PAN: 2,\n        TOUCH_ROTATE: 3,\n        TOUCH_PAN: 4,\n        TOUCH_DOLLY_PAN: 5,\n        TOUCH_DOLLY_ROTATE: 6\n      };\n      let state = STATE.NONE;\n      const EPS = 0.000001; // current position in spherical coordinates\n\n      const spherical = new THREE.Spherical();\n      const sphericalDelta = new THREE.Spherical();\n      let scale = 1;\n      const panOffset = new THREE.Vector3();\n      let zoomChanged = false;\n      const rotateStart = new THREE.Vector2();\n      const rotateEnd = new THREE.Vector2();\n      const rotateDelta = new THREE.Vector2();\n      const panStart = new THREE.Vector2();\n      const panEnd = new THREE.Vector2();\n      const panDelta = new THREE.Vector2();\n      const dollyStart = new THREE.Vector2();\n      const dollyEnd = new THREE.Vector2();\n      const dollyDelta = new THREE.Vector2();\n      const pointers = [];\n      const pointerPositions = {};\n\n      function getAutoRotationAngle() {\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n      }\n\n      function getZoomScale() {\n        return Math.pow(0.95, scope.zoomSpeed);\n      }\n\n      function rotateLeft(angle) {\n        sphericalDelta.theta -= angle;\n      }\n\n      function rotateUp(angle) {\n        sphericalDelta.phi -= angle;\n      }\n\n      const panLeft = function () {\n        const v = new THREE.Vector3();\n        return function panLeft(distance, objectMatrix) {\n          v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\n          v.multiplyScalar(-distance);\n          panOffset.add(v);\n        };\n      }();\n\n      const panUp = function () {\n        const v = new THREE.Vector3();\n        return function panUp(distance, objectMatrix) {\n          if (scope.screenSpacePanning === true) {\n            v.setFromMatrixColumn(objectMatrix, 1);\n          } else {\n            v.setFromMatrixColumn(objectMatrix, 0);\n            v.crossVectors(scope.object.up, v);\n          }\n\n          v.multiplyScalar(distance);\n          panOffset.add(v);\n        };\n      }(); // deltaX and deltaY are in pixels; right and down are positive\n\n\n      const pan = function () {\n        const offset = new THREE.Vector3();\n        return function pan(deltaX, deltaY) {\n          const element = scope.domElement;\n\n          if (scope.object.isPerspectiveCamera) {\n            // perspective\n            const position = scope.object.position;\n            offset.copy(position).sub(scope.target);\n            let targetDistance = offset.length(); // half of the fov is center to top of screen\n\n            targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed\n\n            panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n            panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n          } else if (scope.object.isOrthographicCamera) {\n            // orthographic\n            panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n            panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n          } else {\n            // camera neither orthographic nor perspective\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n            scope.enablePan = false;\n          }\n        };\n      }();\n\n      function dollyOut(dollyScale) {\n        if (scope.object.isPerspectiveCamera) {\n          scale /= dollyScale;\n        } else if (scope.object.isOrthographicCamera) {\n          scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n          scope.object.updateProjectionMatrix();\n          zoomChanged = true;\n        } else {\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n          scope.enableZoom = false;\n        }\n      }\n\n      function dollyIn(dollyScale) {\n        if (scope.object.isPerspectiveCamera) {\n          scale *= dollyScale;\n        } else if (scope.object.isOrthographicCamera) {\n          scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n          scope.object.updateProjectionMatrix();\n          zoomChanged = true;\n        } else {\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n          scope.enableZoom = false;\n        }\n      } //\n      // event callbacks - update the object state\n      //\n\n\n      function handleMouseDownRotate(event) {\n        rotateStart.set(event.clientX, event.clientY);\n      }\n\n      function handleMouseDownDolly(event) {\n        dollyStart.set(event.clientX, event.clientY);\n      }\n\n      function handleMouseDownPan(event) {\n        panStart.set(event.clientX, event.clientY);\n      }\n\n      function handleMouseMoveRotate(event) {\n        rotateEnd.set(event.clientX, event.clientY);\n        rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n        const element = scope.domElement;\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height\n\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n        rotateStart.copy(rotateEnd);\n        scope.update();\n      }\n\n      function handleMouseMoveDolly(event) {\n        dollyEnd.set(event.clientX, event.clientY);\n        dollyDelta.subVectors(dollyEnd, dollyStart);\n\n        if (dollyDelta.y > 0) {\n          dollyOut(getZoomScale());\n        } else if (dollyDelta.y < 0) {\n          dollyIn(getZoomScale());\n        }\n\n        dollyStart.copy(dollyEnd);\n        scope.update();\n      }\n\n      function handleMouseMovePan(event) {\n        panEnd.set(event.clientX, event.clientY);\n        panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n        pan(panDelta.x, panDelta.y);\n        panStart.copy(panEnd);\n        scope.update();\n      }\n\n      function handleMouseUp() {// no-op\n      }\n\n      function handleMouseWheel(event) {\n        if (event.deltaY < 0) {\n          dollyIn(getZoomScale());\n        } else if (event.deltaY > 0) {\n          dollyOut(getZoomScale());\n        }\n\n        scope.update();\n      }\n\n      function handleKeyDown(event) {\n        let needsUpdate = false;\n\n        switch (event.code) {\n          case scope.keys.UP:\n            pan(0, scope.keyPanSpeed);\n            needsUpdate = true;\n            break;\n\n          case scope.keys.BOTTOM:\n            pan(0, -scope.keyPanSpeed);\n            needsUpdate = true;\n            break;\n\n          case scope.keys.LEFT:\n            pan(scope.keyPanSpeed, 0);\n            needsUpdate = true;\n            break;\n\n          case scope.keys.RIGHT:\n            pan(-scope.keyPanSpeed, 0);\n            needsUpdate = true;\n            break;\n        }\n\n        if (needsUpdate) {\n          // prevent the browser from scrolling on cursor keys\n          event.preventDefault();\n          scope.update();\n        }\n      }\n\n      function handleTouchStartRotate() {\n        if (pointers.length === 1) {\n          rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n        } else {\n          const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n          const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n          rotateStart.set(x, y);\n        }\n      }\n\n      function handleTouchStartPan() {\n        if (pointers.length === 1) {\n          panStart.set(pointers[0].pageX, pointers[0].pageY);\n        } else {\n          const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n          const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n          panStart.set(x, y);\n        }\n      }\n\n      function handleTouchStartDolly() {\n        const dx = pointers[0].pageX - pointers[1].pageX;\n        const dy = pointers[0].pageY - pointers[1].pageY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        dollyStart.set(0, distance);\n      }\n\n      function handleTouchStartDollyPan() {\n        if (scope.enableZoom) handleTouchStartDolly();\n        if (scope.enablePan) handleTouchStartPan();\n      }\n\n      function handleTouchStartDollyRotate() {\n        if (scope.enableZoom) handleTouchStartDolly();\n        if (scope.enableRotate) handleTouchStartRotate();\n      }\n\n      function handleTouchMoveRotate(event) {\n        if (pointers.length == 1) {\n          rotateEnd.set(event.pageX, event.pageY);\n        } else {\n          const position = getSecondPointerPosition(event);\n          const x = 0.5 * (event.pageX + position.x);\n          const y = 0.5 * (event.pageY + position.y);\n          rotateEnd.set(x, y);\n        }\n\n        rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n        const element = scope.domElement;\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height\n\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n        rotateStart.copy(rotateEnd);\n      }\n\n      function handleTouchMovePan(event) {\n        if (pointers.length === 1) {\n          panEnd.set(event.pageX, event.pageY);\n        } else {\n          const position = getSecondPointerPosition(event);\n          const x = 0.5 * (event.pageX + position.x);\n          const y = 0.5 * (event.pageY + position.y);\n          panEnd.set(x, y);\n        }\n\n        panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n        pan(panDelta.x, panDelta.y);\n        panStart.copy(panEnd);\n      }\n\n      function handleTouchMoveDolly(event) {\n        const position = getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        dollyEnd.set(0, distance);\n        dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n        dollyOut(dollyDelta.y);\n        dollyStart.copy(dollyEnd);\n      }\n\n      function handleTouchMoveDollyPan(event) {\n        if (scope.enableZoom) handleTouchMoveDolly(event);\n        if (scope.enablePan) handleTouchMovePan(event);\n      }\n\n      function handleTouchMoveDollyRotate(event) {\n        if (scope.enableZoom) handleTouchMoveDolly(event);\n        if (scope.enableRotate) handleTouchMoveRotate(event);\n      }\n\n      function handleTouchEnd() {// no-op\n      } //\n      // event handlers - FSM: listen for events and reset state\n      //\n\n\n      function onPointerDown(event) {\n        if (scope.enabled === false) return;\n\n        if (pointers.length === 0) {\n          scope.domElement.setPointerCapture(event.pointerId);\n          scope.domElement.addEventListener('pointermove', onPointerMove);\n          scope.domElement.addEventListener('pointerup', onPointerUp);\n        } //\n\n\n        addPointer(event);\n\n        if (event.pointerType === 'touch') {\n          onTouchStart(event);\n        } else {\n          onMouseDown(event);\n        }\n      }\n\n      function onPointerMove(event) {\n        if (scope.enabled === false) return;\n\n        if (event.pointerType === 'touch') {\n          onTouchMove(event);\n        } else {\n          onMouseMove(event);\n        }\n      }\n\n      function onPointerUp(event) {\n        if (scope.enabled === false) return;\n\n        if (event.pointerType === 'touch') {\n          onTouchEnd();\n        } else {\n          onMouseUp(event);\n        }\n\n        removePointer(event); //\n\n        if (pointers.length === 0) {\n          scope.domElement.releasePointerCapture(event.pointerId);\n          scope.domElement.removeEventListener('pointermove', onPointerMove);\n          scope.domElement.removeEventListener('pointerup', onPointerUp);\n        }\n      }\n\n      function onPointerCancel(event) {\n        removePointer(event);\n      }\n\n      function onMouseDown(event) {\n        let mouseAction;\n\n        switch (event.button) {\n          case 0:\n            mouseAction = scope.mouseButtons.LEFT;\n            break;\n\n          case 1:\n            mouseAction = scope.mouseButtons.MIDDLE;\n            break;\n\n          case 2:\n            mouseAction = scope.mouseButtons.RIGHT;\n            break;\n\n          default:\n            mouseAction = -1;\n        }\n\n        switch (mouseAction) {\n          case THREE.MOUSE.DOLLY:\n            if (scope.enableZoom === false) return;\n            handleMouseDownDolly(event);\n            state = STATE.DOLLY;\n            break;\n\n          case THREE.MOUSE.ROTATE:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n              if (scope.enablePan === false) return;\n              handleMouseDownPan(event);\n              state = STATE.PAN;\n            } else {\n              if (scope.enableRotate === false) return;\n              handleMouseDownRotate(event);\n              state = STATE.ROTATE;\n            }\n\n            break;\n\n          case THREE.MOUSE.PAN:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n              if (scope.enableRotate === false) return;\n              handleMouseDownRotate(event);\n              state = STATE.ROTATE;\n            } else {\n              if (scope.enablePan === false) return;\n              handleMouseDownPan(event);\n              state = STATE.PAN;\n            }\n\n            break;\n\n          default:\n            state = STATE.NONE;\n        }\n\n        if (state !== STATE.NONE) {\n          scope.dispatchEvent(_startEvent);\n        }\n      }\n\n      function onMouseMove(event) {\n        if (scope.enabled === false) return;\n\n        switch (state) {\n          case STATE.ROTATE:\n            if (scope.enableRotate === false) return;\n            handleMouseMoveRotate(event);\n            break;\n\n          case STATE.DOLLY:\n            if (scope.enableZoom === false) return;\n            handleMouseMoveDolly(event);\n            break;\n\n          case STATE.PAN:\n            if (scope.enablePan === false) return;\n            handleMouseMovePan(event);\n            break;\n        }\n      }\n\n      function onMouseUp(event) {\n        handleMouseUp(event);\n        scope.dispatchEvent(_endEvent);\n        state = STATE.NONE;\n      }\n\n      function onMouseWheel(event) {\n        if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n        event.preventDefault();\n        scope.dispatchEvent(_startEvent);\n        handleMouseWheel(event);\n        scope.dispatchEvent(_endEvent);\n      }\n\n      function onKeyDown(event) {\n        if (scope.enabled === false || scope.enablePan === false) return;\n        handleKeyDown(event);\n      }\n\n      function onTouchStart(event) {\n        trackPointer(event);\n\n        switch (pointers.length) {\n          case 1:\n            switch (scope.touches.ONE) {\n              case THREE.TOUCH.ROTATE:\n                if (scope.enableRotate === false) return;\n                handleTouchStartRotate();\n                state = STATE.TOUCH_ROTATE;\n                break;\n\n              case THREE.TOUCH.PAN:\n                if (scope.enablePan === false) return;\n                handleTouchStartPan();\n                state = STATE.TOUCH_PAN;\n                break;\n\n              default:\n                state = STATE.NONE;\n            }\n\n            break;\n\n          case 2:\n            switch (scope.touches.TWO) {\n              case THREE.TOUCH.DOLLY_PAN:\n                if (scope.enableZoom === false && scope.enablePan === false) return;\n                handleTouchStartDollyPan();\n                state = STATE.TOUCH_DOLLY_PAN;\n                break;\n\n              case THREE.TOUCH.DOLLY_ROTATE:\n                if (scope.enableZoom === false && scope.enableRotate === false) return;\n                handleTouchStartDollyRotate();\n                state = STATE.TOUCH_DOLLY_ROTATE;\n                break;\n\n              default:\n                state = STATE.NONE;\n            }\n\n            break;\n\n          default:\n            state = STATE.NONE;\n        }\n\n        if (state !== STATE.NONE) {\n          scope.dispatchEvent(_startEvent);\n        }\n      }\n\n      function onTouchMove(event) {\n        trackPointer(event);\n\n        switch (state) {\n          case STATE.TOUCH_ROTATE:\n            if (scope.enableRotate === false) return;\n            handleTouchMoveRotate(event);\n            scope.update();\n            break;\n\n          case STATE.TOUCH_PAN:\n            if (scope.enablePan === false) return;\n            handleTouchMovePan(event);\n            scope.update();\n            break;\n\n          case STATE.TOUCH_DOLLY_PAN:\n            if (scope.enableZoom === false && scope.enablePan === false) return;\n            handleTouchMoveDollyPan(event);\n            scope.update();\n            break;\n\n          case STATE.TOUCH_DOLLY_ROTATE:\n            if (scope.enableZoom === false && scope.enableRotate === false) return;\n            handleTouchMoveDollyRotate(event);\n            scope.update();\n            break;\n\n          default:\n            state = STATE.NONE;\n        }\n      }\n\n      function onTouchEnd(event) {\n        handleTouchEnd(event);\n        scope.dispatchEvent(_endEvent);\n        state = STATE.NONE;\n      }\n\n      function onContextMenu(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault();\n      }\n\n      function addPointer(event) {\n        pointers.push(event);\n      }\n\n      function removePointer(event) {\n        delete pointerPositions[event.pointerId];\n\n        for (let i = 0; i < pointers.length; i++) {\n          if (pointers[i].pointerId == event.pointerId) {\n            pointers.splice(i, 1);\n            return;\n          }\n        }\n      }\n\n      function trackPointer(event) {\n        let position = pointerPositions[event.pointerId];\n\n        if (position === undefined) {\n          position = new THREE.Vector2();\n          pointerPositions[event.pointerId] = position;\n        }\n\n        position.set(event.pageX, event.pageY);\n      }\n\n      function getSecondPointerPosition(event) {\n        const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n        return pointerPositions[pointer.pointerId];\n      } //\n\n\n      scope.domElement.addEventListener('contextmenu', onContextMenu);\n      scope.domElement.addEventListener('pointerdown', onPointerDown);\n      scope.domElement.addEventListener('pointercancel', onPointerCancel);\n      scope.domElement.addEventListener('wheel', onMouseWheel, {\n        passive: false\n      }); // force an update at start\n\n      this.update();\n    }\n\n  } // This set of controls performs orbiting, dollying (zooming), and panning.\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n  // This is very similar to OrbitControls, another set of touch behavior\n  //\n  //    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n  //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n  //    Pan - left mouse, or arrow keys / touch: one-finger move\n\n\n  class MapControls extends OrbitControls {\n    constructor(object, domElement) {\n      super(object, domElement);\n      this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n      this.mouseButtons.LEFT = THREE.MOUSE.PAN;\n      this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n      this.touches.ONE = THREE.TOUCH.PAN;\n      this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n    }\n\n  }\n\n  THREE.MapControls = MapControls;\n  THREE.OrbitControls = OrbitControls;\n})();","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Three.js-Example/cube-notes/node_modules/three/examples/js/controls/OrbitControls.js"],"names":["_changeEvent","type","_startEvent","_endEvent","OrbitControls","THREE","EventDispatcher","constructor","object","domElement","undefined","console","warn","document","error","style","touchAction","enabled","target","Vector3","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","saveState","scope","copy","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","twoPI","sub","applyQuaternion","setFromVector3","rotateLeft","getAutoRotationAngle","sphericalDelta","min","max","isFinite","makeSafe","radius","scale","addScaledVector","panOffset","add","setFromSpherical","lookAt","multiplyScalar","set","zoomChanged","distanceToSquared","EPS","dot","quaternion","dispose","removeEventListener","onContextMenu","onPointerDown","onPointerCancel","onMouseWheel","onPointerMove","onPointerUp","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","isPerspectiveCamera","targetDistance","length","tan","fov","clientHeight","matrix","isOrthographicCamera","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","clientX","clientY","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","subVectors","x","y","handleMouseMoveDolly","handleMouseMovePan","handleMouseUp","handleMouseWheel","handleKeyDown","needsUpdate","code","preventDefault","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveRotate","getSecondPointerPosition","handleTouchMovePan","handleTouchMoveDolly","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","handleTouchEnd","setPointerCapture","pointerId","addPointer","pointerType","onTouchStart","onMouseDown","onTouchMove","onMouseMove","onTouchEnd","onMouseUp","removePointer","releasePointerCapture","mouseAction","button","ctrlKey","metaKey","shiftKey","trackPointer","DOLLY_ROTATE","push","i","splice","pointer","passive","MapControls"],"mappings":"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","sourcesContent":["( function () {\n\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one-finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n\t//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\n\tconst _changeEvent = {\n\t\ttype: 'change'\n\t};\n\tconst _startEvent = {\n\t\ttype: 'start'\n\t};\n\tconst _endEvent = {\n\t\ttype: 'end'\n\t};\n\n\tclass OrbitControls extends THREE.EventDispatcher {\n\n\t\tconstructor( object, domElement ) {\n\n\t\t\tsuper();\n\t\t\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\t\t\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\t\t\tthis.object = object;\n\t\t\tthis.domElement = domElement;\n\t\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\t\t\t// Set to false to disable this control\n\n\t\t\tthis.enabled = true; // \"target\" sets the location of focus, where the object orbits around\n\n\t\t\tthis.target = new THREE.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )\n\n\t\t\tthis.minDistance = 0;\n\t\t\tthis.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )\n\n\t\t\tthis.minZoom = 0;\n\t\t\tthis.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.\n\t\t\t// Range is 0 to Math.PI radians.\n\n\t\t\tthis.minPolarAngle = 0; // radians\n\n\t\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\n\t\t\tthis.minAzimuthAngle = - Infinity; // radians\n\n\t\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\t\t// Set to true to enable damping (inertia)\n\t\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\n\t\t\tthis.enableDamping = false;\n\t\t\tthis.dampingFactor = 0.05; // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t\t// Set to false to disable zooming\n\n\t\t\tthis.enableZoom = true;\n\t\t\tthis.zoomSpeed = 1.0; // Set to false to disable rotating\n\n\t\t\tthis.enableRotate = true;\n\t\t\tthis.rotateSpeed = 1.0; // Set to false to disable panning\n\n\t\t\tthis.enablePan = true;\n\t\t\tthis.panSpeed = 1.0;\n\t\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\n\t\t\tthis.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\t\t\t// Set to true to automatically rotate around the target\n\t\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\n\t\t\tthis.autoRotate = false;\n\t\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\t\t\t// The four arrow keys\n\n\t\t\tthis.keys = {\n\t\t\t\tLEFT: 'ArrowLeft',\n\t\t\t\tUP: 'ArrowUp',\n\t\t\t\tRIGHT: 'ArrowRight',\n\t\t\t\tBOTTOM: 'ArrowDown'\n\t\t\t}; // Mouse buttons\n\n\t\t\tthis.mouseButtons = {\n\t\t\t\tLEFT: THREE.MOUSE.ROTATE,\n\t\t\t\tMIDDLE: THREE.MOUSE.DOLLY,\n\t\t\t\tRIGHT: THREE.MOUSE.PAN\n\t\t\t}; // Touch fingers\n\n\t\t\tthis.touches = {\n\t\t\t\tONE: THREE.TOUCH.ROTATE,\n\t\t\t\tTWO: THREE.TOUCH.DOLLY_PAN\n\t\t\t}; // for reset\n\n\t\t\tthis.target0 = this.target.clone();\n\t\t\tthis.position0 = this.object.position.clone();\n\t\t\tthis.zoom0 = this.object.zoom; // the target DOM element for key events\n\n\t\t\tthis._domElementKeyEvents = null; //\n\t\t\t// public methods\n\t\t\t//\n\n\t\t\tthis.getPolarAngle = function () {\n\n\t\t\t\treturn spherical.phi;\n\n\t\t\t};\n\n\t\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\t\treturn spherical.theta;\n\n\t\t\t};\n\n\t\t\tthis.getDistance = function () {\n\n\t\t\t\treturn this.object.position.distanceTo( this.target );\n\n\t\t\t};\n\n\t\t\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\t\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\t\t\tthis._domElementKeyEvents = domElement;\n\n\t\t\t};\n\n\t\t\tthis.saveState = function () {\n\n\t\t\t\tscope.target0.copy( scope.target );\n\t\t\t\tscope.position0.copy( scope.object.position );\n\t\t\t\tscope.zoom0 = scope.object.zoom;\n\n\t\t\t};\n\n\t\t\tthis.reset = function () {\n\n\t\t\t\tscope.target.copy( scope.target0 );\n\t\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\t\tscope.object.zoom = scope.zoom0;\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tscope.dispatchEvent( _changeEvent );\n\t\t\t\tscope.update();\n\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}; // this method is exposed, but perhaps it would be better if we can make it private...\n\n\n\t\t\tthis.update = function () {\n\n\t\t\t\tconst offset = new THREE.Vector3(); // so camera.up is the orbit axis\n\n\t\t\t\tconst quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\t\tconst quatInverse = quat.clone().invert();\n\t\t\t\tconst lastPosition = new THREE.Vector3();\n\t\t\t\tconst lastQuaternion = new THREE.Quaternion();\n\t\t\t\tconst twoPI = 2 * Math.PI;\n\t\t\t\treturn function update() {\n\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target ); // rotate offset to \"y-axis-is-up\" space\n\n\t\t\t\t\toffset.applyQuaternion( quat ); // angle from z-axis around y-axis\n\n\t\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t\t} // restrict theta to be between desired limits\n\n\n\t\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\t\t\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tspherical.theta = spherical.theta > ( min + max ) / 2 ? Math.max( min, spherical.theta ) : Math.min( max, spherical.theta );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // restrict phi to be between desired limits\n\n\n\t\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\t\t\t\t\tspherical.makeSafe();\n\t\t\t\t\tspherical.radius *= scale; // restrict radius to be between desired limits\n\n\t\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) ); // move target to panned location\n\n\t\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toffset.setFromSpherical( spherical ); // rotate offset back to \"camera-up-vector-is-up\" space\n\n\t\t\t\t\toffset.applyQuaternion( quatInverse );\n\t\t\t\t\tposition.copy( scope.target ).add( offset );\n\t\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\t\tsphericalDelta.theta *= 1 - scope.dampingFactor;\n\t\t\t\t\t\tsphericalDelta.phi *= 1 - scope.dampingFactor;\n\t\t\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\t\t\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscale = 1; // update condition is:\n\t\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\t\tif ( zoomChanged || lastPosition.distanceToSquared( scope.object.position ) > EPS || 8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\t\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\t\tzoomChanged = false;\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t};\n\n\t\t\t}();\n\n\t\t\tthis.dispose = function () {\n\n\t\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\t\t\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\t\tscope.domElement.removeEventListener( 'pointercancel', onPointerCancel );\n\t\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\t\t\t\tscope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\t\tscope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\t\t\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t\t\t} //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t\t}; //\n\t\t\t// internals\n\t\t\t//\n\n\n\t\t\tconst scope = this;\n\t\t\tconst STATE = {\n\t\t\t\tNONE: - 1,\n\t\t\t\tROTATE: 0,\n\t\t\t\tDOLLY: 1,\n\t\t\t\tPAN: 2,\n\t\t\t\tTOUCH_ROTATE: 3,\n\t\t\t\tTOUCH_PAN: 4,\n\t\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\t\tTOUCH_DOLLY_ROTATE: 6\n\t\t\t};\n\t\t\tlet state = STATE.NONE;\n\t\t\tconst EPS = 0.000001; // current position in spherical coordinates\n\n\t\t\tconst spherical = new THREE.Spherical();\n\t\t\tconst sphericalDelta = new THREE.Spherical();\n\t\t\tlet scale = 1;\n\t\t\tconst panOffset = new THREE.Vector3();\n\t\t\tlet zoomChanged = false;\n\t\t\tconst rotateStart = new THREE.Vector2();\n\t\t\tconst rotateEnd = new THREE.Vector2();\n\t\t\tconst rotateDelta = new THREE.Vector2();\n\t\t\tconst panStart = new THREE.Vector2();\n\t\t\tconst panEnd = new THREE.Vector2();\n\t\t\tconst panDelta = new THREE.Vector2();\n\t\t\tconst dollyStart = new THREE.Vector2();\n\t\t\tconst dollyEnd = new THREE.Vector2();\n\t\t\tconst dollyDelta = new THREE.Vector2();\n\t\t\tconst pointers = [];\n\t\t\tconst pointerPositions = {};\n\n\t\t\tfunction getAutoRotationAngle() {\n\n\t\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t\t}\n\n\t\t\tfunction getZoomScale() {\n\n\t\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t\t}\n\n\t\t\tfunction rotateLeft( angle ) {\n\n\t\t\t\tsphericalDelta.theta -= angle;\n\n\t\t\t}\n\n\t\t\tfunction rotateUp( angle ) {\n\n\t\t\t\tsphericalDelta.phi -= angle;\n\n\t\t\t}\n\n\t\t\tconst panLeft = function () {\n\n\t\t\t\tconst v = new THREE.Vector3();\n\t\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\n\t\t\t\t\tv.multiplyScalar( - distance );\n\t\t\t\t\tpanOffset.add( v );\n\n\t\t\t\t};\n\n\t\t\t}();\n\n\t\t\tconst panUp = function () {\n\n\t\t\t\tconst v = new THREE.Vector3();\n\t\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tv.multiplyScalar( distance );\n\t\t\t\t\tpanOffset.add( v );\n\n\t\t\t\t};\n\n\t\t\t}(); // deltaX and deltaY are in pixels; right and down are positive\n\n\n\t\t\tconst pan = function () {\n\n\t\t\t\tconst offset = new THREE.Vector3();\n\t\t\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t\t// perspective\n\t\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\t\tlet targetDistance = offset.length(); // half of the fov is center to top of screen\n\n\t\t\t\t\t\ttargetDistance *= Math.tan( scope.object.fov / 2 * Math.PI / 180.0 ); // we use only clientHeight here so aspect ratio does not distort speed\n\n\t\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\t\t// orthographic\n\t\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}();\n\n\t\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\tscale /= dollyScale;\n\n\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\t\tzoomChanged = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\t\tscope.enableZoom = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\tscale *= dollyScale;\n\n\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\t\tzoomChanged = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\t\tscope.enableZoom = false;\n\n\t\t\t\t}\n\n\t\t\t} //\n\t\t\t// event callbacks - update the object state\n\t\t\t//\n\n\n\t\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t\t}\n\n\t\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t\t}\n\n\t\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t\t}\n\n\t\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\t\t\t\tconst element = scope.domElement;\n\t\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\t\t\t\trotateStart.copy( rotateEnd );\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\t\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\t\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\t\t\t\tpan( panDelta.x, panDelta.y );\n\t\t\t\tpanStart.copy( panEnd );\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\t\t\tfunction handleMouseUp() { // no-op\n\t\t\t}\n\n\t\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t\t}\n\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\t\t\tfunction handleKeyDown( event ) {\n\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tswitch ( event.code ) {\n\n\t\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tscope.update();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction handleTouchStartRotate() {\n\n\t\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\t\trotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\t\t\t\t\trotateStart.set( x, y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction handleTouchStartPan() {\n\n\t\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\t\tpanStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\t\t\t\t\tpanStart.set( x, y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction handleTouchStartDolly() {\n\n\t\t\t\tconst dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;\n\t\t\t\tconst dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;\n\t\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchStartDollyPan() {\n\n\t\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\t\t\t\tif ( scope.enablePan ) handleTouchStartPan();\n\n\t\t\t}\n\n\t\t\tfunction handleTouchStartDollyRotate() {\n\n\t\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\t\t\t\tif ( scope.enableRotate ) handleTouchStartRotate();\n\n\t\t\t}\n\n\t\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t\tif ( pointers.length == 1 ) {\n\n\t\t\t\t\trotateEnd.set( event.pageX, event.pageY );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst position = getSecondPointerPosition( event );\n\t\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\t\t\t\t\trotateEnd.set( x, y );\n\n\t\t\t\t}\n\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\t\t\t\tconst element = scope.domElement;\n\t\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\t\tpanEnd.set( event.pageX, event.pageY );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst position = getSecondPointerPosition( event );\n\t\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\t\t\t\t\tpanEnd.set( x, y );\n\n\t\t\t\t}\n\n\t\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\t\t\t\tpan( panDelta.x, panDelta.y );\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\t\t\t\tconst dx = event.pageX - position.x;\n\t\t\t\tconst dy = event.pageY - position.y;\n\t\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\t\t\t\tdollyOut( dollyDelta.y );\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\t\t\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\t\t\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t\t\t}\n\n\t\t\tfunction handleTouchEnd() { // no-op\n\t\t\t} //\n\t\t\t// event handlers - FSM: listen for events and reset state\n\t\t\t//\n\n\n\t\t\tfunction onPointerDown( event ) {\n\n\t\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\t\tif ( pointers.length === 0 ) {\n\n\t\t\t\t\tscope.domElement.setPointerCapture( event.pointerId );\n\t\t\t\t\tscope.domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t\t\tscope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\t\t} //\n\n\n\t\t\t\taddPointer( event );\n\n\t\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\t\tonTouchStart( event );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonMouseDown( event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onPointerMove( event ) {\n\n\t\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\t\tonTouchMove( event );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonMouseMove( event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onPointerUp( event ) {\n\n\t\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\t\tonTouchEnd();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonMouseUp( event );\n\n\t\t\t\t}\n\n\t\t\t\tremovePointer( event ); //\n\n\t\t\t\tif ( pointers.length === 0 ) {\n\n\t\t\t\t\tscope.domElement.releasePointerCapture( event.pointerId );\n\t\t\t\t\tscope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\t\t\tscope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onPointerCancel( event ) {\n\n\t\t\t\tremovePointer( event );\n\n\t\t\t}\n\n\t\t\tfunction onMouseDown( event ) {\n\n\t\t\t\tlet mouseAction;\n\n\t\t\t\tswitch ( event.button ) {\n\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmouseAction = - 1;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( mouseAction ) {\n\n\t\t\t\t\tcase THREE.MOUSE.DOLLY:\n\t\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\t\thandleMouseDownDolly( event );\n\t\t\t\t\t\tstate = STATE.DOLLY;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.MOUSE.ROTATE:\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.MOUSE.PAN:\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onMouseMove( event ) {\n\n\t\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\t\tswitch ( state ) {\n\n\t\t\t\t\tcase STATE.ROTATE:\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\t\thandleMouseMoveRotate( event );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE.DOLLY:\n\t\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\t\thandleMouseMoveDolly( event );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE.PAN:\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\t\thandleMouseMovePan( event );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onMouseUp( event ) {\n\n\t\t\t\thandleMouseUp( event );\n\t\t\t\tscope.dispatchEvent( _endEvent );\n\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tfunction onMouseWheel( event ) {\n\n\t\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE ) return;\n\t\t\t\tevent.preventDefault();\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\t\t\t\thandleMouseWheel( event );\n\t\t\t\tscope.dispatchEvent( _endEvent );\n\n\t\t\t}\n\n\t\t\tfunction onKeyDown( event ) {\n\n\t\t\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\t\t\t\thandleKeyDown( event );\n\n\t\t\t}\n\n\t\t\tfunction onTouchStart( event ) {\n\n\t\t\t\ttrackPointer( event );\n\n\t\t\t\tswitch ( pointers.length ) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\t\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\t\t\t\thandleTouchStartRotate();\n\t\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase THREE.TOUCH.PAN:\n\t\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\t\t\t\thandleTouchStartPan();\n\t\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\t\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\t\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\t\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\t\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\t\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\t\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onTouchMove( event ) {\n\n\t\t\t\ttrackPointer( event );\n\n\t\t\t\tswitch ( state ) {\n\n\t\t\t\t\tcase STATE.TOUCH_ROTATE:\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\t\thandleTouchMoveRotate( event );\n\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE.TOUCH_PAN:\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\t\thandleTouchMovePan( event );\n\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\t\t\t\t\t\thandleTouchMoveDollyPan( event );\n\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\t\t\t\t\t\thandleTouchMoveDollyRotate( event );\n\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onTouchEnd( event ) {\n\n\t\t\t\thandleTouchEnd( event );\n\t\t\t\tscope.dispatchEvent( _endEvent );\n\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tfunction onContextMenu( event ) {\n\n\t\t\t\tif ( scope.enabled === false ) return;\n\t\t\t\tevent.preventDefault();\n\n\t\t\t}\n\n\t\t\tfunction addPointer( event ) {\n\n\t\t\t\tpointers.push( event );\n\n\t\t\t}\n\n\t\t\tfunction removePointer( event ) {\n\n\t\t\t\tdelete pointerPositions[ event.pointerId ];\n\n\t\t\t\tfor ( let i = 0; i < pointers.length; i ++ ) {\n\n\t\t\t\t\tif ( pointers[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\t\t\tpointers.splice( i, 1 );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction trackPointer( event ) {\n\n\t\t\t\tlet position = pointerPositions[ event.pointerId ];\n\n\t\t\t\tif ( position === undefined ) {\n\n\t\t\t\t\tposition = new THREE.Vector2();\n\t\t\t\t\tpointerPositions[ event.pointerId ] = position;\n\n\t\t\t\t}\n\n\t\t\t\tposition.set( event.pageX, event.pageY );\n\n\t\t\t}\n\n\t\t\tfunction getSecondPointerPosition( event ) {\n\n\t\t\t\tconst pointer = event.pointerId === pointers[ 0 ].pointerId ? pointers[ 1 ] : pointers[ 0 ];\n\t\t\t\treturn pointerPositions[ pointer.pointerId ];\n\n\t\t\t} //\n\n\n\t\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\t\t\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\t\tscope.domElement.addEventListener( 'pointercancel', onPointerCancel );\n\t\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, {\n\t\t\t\tpassive: false\n\t\t\t} ); // force an update at start\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t} // This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t// This is very similar to OrbitControls, another set of touch behavior\n\t//\n\t//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n\t//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n\t//    Pan - left mouse, or arrow keys / touch: one-finger move\n\n\n\tclass MapControls extends OrbitControls {\n\n\t\tconstructor( object, domElement ) {\n\n\t\t\tsuper( object, domElement );\n\t\t\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\t\t\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\t\t\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\t\t\tthis.touches.ONE = THREE.TOUCH.PAN;\n\t\t\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n\t\t}\n\n\t}\n\n\tTHREE.MapControls = MapControls;\n\tTHREE.OrbitControls = OrbitControls;\n\n} )();\n"]},"metadata":{},"sourceType":"script"}