{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as d3 from 'd3';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  let scene;\n  let skybox;\n\n  function initScene() {\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x222244);\n    scene.add(new THREE.AmbientLight(0x444444));\n    scene.fog = new THREE.Fog(0x222244, 1600, 2000); // Create snowy field plane\n\n    let planeGeom = new THREE.PlaneGeometry(10000, 10000);\n    let planeMesh = new THREE.MeshBasicMaterial({\n      color: 0xc2bfb8,\n      side: THREE.DoubleSide\n    });\n    var plane = new THREE.Mesh(planeGeom, planeMesh); // Rotate to viewable angle\n\n    plane.rotation.x = Math.PI / 2; // Create skybox\n\n    let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\n    scene.add(skybox);\n    scene.add(plane); // Manually load in skybox images\n\n    const ft = new THREE.TextureLoader().load(\"../static/skybox/GTX_ft.jpg\");\n    const bk = new THREE.TextureLoader().load(\"../static/skybox/GTX_bk.jpg\");\n    const up = new THREE.TextureLoader().load(\"../static/skybox/GTX_up.jpg\");\n    const dn = new THREE.TextureLoader().load(\"../static/skybox/GTX_dn.jpg\");\n    const rt = new THREE.TextureLoader().load(\"../static/skybox/GTX_rt.jpg\");\n    const lf = new THREE.TextureLoader().load(\"../static/skybox/GTX_lf.jpg\");\n    let textures = [ft, bk, up, dn, rt, lf];\n    let materials = [];\n    textures.forEach(d => {\n      materials.push(new THREE());\n    });\n\n    function createMaterialArray(filename) {\n      const skyboxImagepaths = createPathStrings(filename);\n      const materialArray = skyboxImagepaths.map(image => {\n        let texture = new THREE.TextureLoader().load(image);\n        return new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.BackSide\n        }); // <---\n      });\n      return materialArray;\n    }\n\n    skybox = new THREE.Mesh(skyGeom);\n    skybox.position.x = 0;\n    skybox.position.y = 0;\n    skybox.position.z = 0;\n  }\n\n  const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 20000);\n  camera.position.set(0, 1000, 5000);\n  camera.lookAt(0, 0, 0);\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.toneMapping = THREE.ACESFilmicToneMapping;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  document.body.appendChild(renderer.domElement);\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.maxPolarAngle = Math.PI * 0.495;\n  controls.target.set(0, 500, 0);\n  controls.minDistance = 40.0;\n  controls.maxDistance = 200.0;\n  controls.update();\n  const clock = new THREE.Clock();\n  camera.position.z = 15;\n  initScene();\n\n  function animate() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  }\n\n  animate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Snowy Scene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","d3","THREE","OrbitControls","Legend","Cube","Environment","App","scene","skybox","initScene","Scene","background","Color","add","AmbientLight","fog","Fog","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","rotation","x","Math","PI","skyGeom","BoxGeometry","ft","TextureLoader","load","bk","up","dn","rt","lf","textures","materials","forEach","d","push","createMaterialArray","filename","skyboxImagepaths","createPathStrings","materialArray","map","image","texture","BackSide","position","y","z","camera","PerspectiveCamera","window","innerWidth","innerHeight","set","lookAt","renderer","WebGLRenderer","antialias","setSize","toneMapping","ACESFilmicToneMapping","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","controls","maxPolarAngle","target","minDistance","maxDistance","update","clock","Clock","animate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nfunction App() {\r\n\r\n\r\nlet scene;\r\nlet skybox;\r\n\r\nfunction initScene() {\r\n\r\n  scene = new THREE.Scene();\r\n  scene.background = new THREE.Color( 0x222244 );\r\n  scene.add( new THREE.AmbientLight( 0x444444 ) );\r\n  scene.fog = new THREE.Fog( 0x222244, 1600, 2000 ); \r\n\r\n  // Create snowy field plane\r\n  let planeGeom = new THREE.PlaneGeometry(10000,10000);\r\n  let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  // Rotate to viewable angle\r\n  plane.rotation.x = Math.PI / 2;\r\n\r\n  // Create skybox\r\n  let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\r\n\r\n\r\n  scene.add(skybox);\r\n  scene.add(plane);\r\n\r\n\r\n  // Manually load in skybox images\r\n  const ft = new THREE.TextureLoader().load(\"../static/skybox/GTX_ft.jpg\");\r\n  const bk = new THREE.TextureLoader().load(\"../static/skybox/GTX_bk.jpg\");\r\n  const up = new THREE.TextureLoader().load(\"../static/skybox/GTX_up.jpg\");\r\n  const dn = new THREE.TextureLoader().load(\"../static/skybox/GTX_dn.jpg\");\r\n  const rt = new THREE.TextureLoader().load(\"../static/skybox/GTX_rt.jpg\");\r\n  const lf = new THREE.TextureLoader().load(\"../static/skybox/GTX_lf.jpg\");\r\n\r\n  let textures = [ft,bk,up,dn,rt,lf];\r\n  let materials = [];\r\n\r\n  textures.forEach(d => {\r\n\r\n      materials.push(new THREE)\r\n\r\n  })\r\n\r\n  function createMaterialArray(filename) {\r\n    const skyboxImagepaths = createPathStrings(filename);\r\n    const materialArray = skyboxImagepaths.map(image => {\r\n      let texture = new THREE.TextureLoader().load(image);\r\n\r\n      return new THREE.MeshBasicMaterial({ map: texture, side: THREE.BackSide }); // <---\r\n    });\r\n    return materialArray;\r\n  }\r\n\r\n  skybox = new THREE.Mesh(skyGeom);\r\n\r\n\r\n  skybox.position.x = 0;\r\n  skybox.position.y = 0;\r\n  skybox.position.z = 0;\r\n\r\n}\r\n  \r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 20000 );\r\n\r\n    camera.position.set(0,1000,5000);\r\n    camera.lookAt(0,0,0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n    document.body.appendChild( renderer.domElement );\r\n\r\n    const controls = new OrbitControls( camera, renderer.domElement );\r\n    controls.maxPolarAngle = Math.PI * 0.495;\r\n    controls.target.set( 0, 500, 0 );\r\n    controls.minDistance = 40.0;\r\n    controls.maxDistance = 200.0;\r\n    controls.update();\r\n\r\n\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n\r\n\r\n    camera.position.z = 15;\r\n    initScene();\r\n    function animate() {\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    <div className=\"App\">\r\n\r\n{/*        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Environment />*/}\r\n\r\n\r\n\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}