{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  let scene;\n  let skybox;\n\n  function initScene() {\n    scene = new THREE.Scene(); //scene.background = new THREE.Color( 0x222244 );\n\n    scene.add(new THREE.AmbientLight(0x444444)); //scene.fog = new THREE.Fog( 0x222244, 1600, 2000 ); \n    // Create snowy field plane\n\n    let planeGeom = new THREE.PlaneGeometry(10000, 10000);\n    let planeMesh = new THREE.MeshBasicMaterial({\n      color: 0xc2bfb8,\n      side: THREE.DoubleSide\n    });\n    var plane = new THREE.Mesh(planeGeom, planeMesh); // Rotate to viewable angle\n\n    plane.rotation.x = Math.PI / 2; // Create skybox\n\n    let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\n    scene.add(plane); // Manually load in skybox images\n\n    const ft = new THREE.TextureLoader().load(\"/skybox/GTX_ft.png\");\n    const bk = new THREE.TextureLoader().load(\"/skybox/GTX_bk.png\");\n    const up = new THREE.TextureLoader().load(\"/skybox/GTX_up.png\");\n    const dn = new THREE.TextureLoader().load(\"/skybox/GTX_dn.png\");\n    const rt = new THREE.TextureLoader().load(\"/skybox/GTX_rt.png\");\n    const lf = new THREE.TextureLoader().load(\"/skybox/GTX_lf.png\");\n    console.log(ft);\n    let textures = [ft, bk, up, dn, rt, lf];\n    let materials = [];\n    textures.forEach(d => {\n      materials.push(new THREE.MeshBasicMaterial({\n        map: d,\n        side: THREE.BackSide\n      }));\n    });\n    skybox = new THREE.Mesh(skyGeom, materials); // scene.add(skybox);\n    // skybox.position.x = 0;\n    // skybox.position.y = 0;\n    // skybox.position.z = 0;\n  }\n\n  const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 20000);\n  camera.position.set(0, 1000, 5000);\n  camera.lookAt(0, 0, 0);\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.toneMapping = THREE.ACESFilmicToneMapping;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  d3.select(\"#App\").append(renderer.domElement); // document.body.appendChild( renderer.domElement );\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.maxPolarAngle = Math.PI * 0.495;\n  controls.target.set(0, 500, 0);\n  controls.minDistance = 40.0;\n  controls.maxDistance = 200.0;\n  controls.update();\n  const clock = new THREE.Clock();\n  camera.position.z = 15;\n  initScene();\n\n  function animate() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  } // Call animate method and get this gravy train rolling!\n\n\n  window.addEventListener('resize', onWindowResize, false);\n  animate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Snowy Scene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      id: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","THREE","OrbitControls","Legend","Cube","Environment","App","scene","skybox","initScene","Scene","add","AmbientLight","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","rotation","x","Math","PI","skyGeom","BoxGeometry","ft","TextureLoader","load","bk","up","dn","rt","lf","console","log","textures","materials","forEach","d","push","map","BackSide","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","toneMapping","ACESFilmicToneMapping","setPixelRatio","devicePixelRatio","d3","select","append","domElement","controls","maxPolarAngle","target","minDistance","maxDistance","update","clock","Clock","z","animate","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","addEventListener"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nfunction App() {\r\n\r\n\r\nlet scene;\r\nlet skybox;\r\n\r\nfunction initScene() {\r\n\r\n  scene = new THREE.Scene();\r\n  //scene.background = new THREE.Color( 0x222244 );\r\n  scene.add( new THREE.AmbientLight( 0x444444 ) );\r\n  //scene.fog = new THREE.Fog( 0x222244, 1600, 2000 ); \r\n\r\n  // Create snowy field plane\r\n  let planeGeom = new THREE.PlaneGeometry(10000,10000);\r\n  let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  // Rotate to viewable angle\r\n  plane.rotation.x = Math.PI / 2;\r\n\r\n  // Create skybox\r\n  let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\r\n\r\n\r\n\r\n  scene.add(plane);\r\n\r\n\r\n  // Manually load in skybox images\r\n  const ft = new THREE.TextureLoader().load(\"/skybox/GTX_ft.png\");\r\n  const bk = new THREE.TextureLoader().load(\"/skybox/GTX_bk.png\");\r\n  const up = new THREE.TextureLoader().load(\"/skybox/GTX_up.png\");\r\n  const dn = new THREE.TextureLoader().load(\"/skybox/GTX_dn.png\");\r\n  const rt = new THREE.TextureLoader().load(\"/skybox/GTX_rt.png\");\r\n  const lf = new THREE.TextureLoader().load(\"/skybox/GTX_lf.png\");\r\n\r\n\r\n  console.log(ft)\r\n\r\n  let textures = [ft,bk,up,dn,rt,lf];\r\n  let materials = [];\r\n\r\n  textures.forEach(d => {\r\n\r\n      materials.push(new THREE.MeshBasicMaterial({ map: d, side: THREE.BackSide  }));\r\n\r\n  });\r\n\r\n  skybox = new THREE.Mesh(skyGeom, materials);\r\n\r\n  // scene.add(skybox);\r\n  // skybox.position.x = 0;\r\n  // skybox.position.y = 0;\r\n  // skybox.position.z = 0;\r\n\r\n}\r\n  \r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 20000 );\r\n\r\n    camera.position.set(0,1000,5000);\r\n    camera.lookAt(0,0,0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\r\n    d3.select(\"#App\").append(renderer.domElement)\r\n\r\n    // document.body.appendChild( renderer.domElement );\r\n\r\n    const controls = new OrbitControls( camera, renderer.domElement );\r\n    controls.maxPolarAngle = Math.PI * 0.495;\r\n    controls.target.set( 0, 500, 0 );\r\n    controls.minDistance = 40.0;\r\n    controls.maxDistance = 200.0;\r\n    controls.update();\r\n\r\n\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n\r\n\r\n    camera.position.z = 15;\r\n    initScene();\r\n    function animate() {\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  function onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  // Call animate method and get this gravy train rolling!\r\n  window.addEventListener('resize', onWindowResize, false);\r\n  animate();\r\n\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    \r\n    <div className=\"App\" id=\"App\">\r\n\r\n{/*        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Environment />*/}\r\n\r\n\r\n\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}