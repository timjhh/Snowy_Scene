{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Cube-Sounds\\\\src\\\\Cube.jsx\";\nimport './App.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as THREE from 'three';\nimport * as Tone from 'tone';\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cube(props) {\n  function main() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement); // L/W/H of the box - how far does a cube travel before resetting\n\n    const max = 4; // Create standard box geometry\n\n    var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var bb = new THREE.BoxGeometry(max * Math.E, max * Math.E, max * Math.E); // Create bounding box render\n\n    const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff);\n    scene.add(bound); // const controls = new THREE.OrbitControls( camera, renderer.domElement );\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.z = 15; //camera.position.y = 15;\n\n    var dx = 0.05;\n    var dy = 0.05;\n    var dz = 0.05; // scale_len = the length of any major or minor scale\n\n    var scale_len = props.scaleRef.current.length; //var max_speed = 0.002;\n    // Define base and max speed\n    // Then, generate a scalar up to max to multiply the base by\n\n    var max_mult = 5;\n    var min_speed = 0.0008; // Each note timing can range from 1-256\n    // This can be represented as a random power of 2 as\n    // 2**8 == 256 and 2**0 == 1\n\n    const max_note_len = 8; // What is the maximum pitch notes can play at\n\n    const max_pitch = 3; // What is the minimum pitch notes can play at\n\n    const min_pitch = 2; // Notes can be represented by:\n    // n - regular note\n    // t - triplet\n    // n. - dotted note\n    // e.g. 4n. is a dotted quarter note\n\n    const note_types = ['n', 't', 'n.'];\n    var cubes = [];\n    const reverb = new Tone.Reverb(2);\n    const delay = new Tone.PingPongDelay(\"8n\", 0.2);\n    const env = new Tone.Envelope(0.4);\n    const vibrato = new Tone.Vibrato();\n    env.attackCurve = 'sine'; //env.triggerAttack();\n\n    for (var i = 0; i < props.maxCubes; i++) {\n      const material = new THREE.MeshBasicMaterial({\n        color: props.color(i)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cubes[i] = cube;\n      let randNote = Math.floor(Math.random() * scale_len);\n      let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\n      let randLen = 2 ** Math.floor(Math.random() * max_note_len);\n      let type_idx = Math.floor(Math.random() * note_types.length);\n      cubes[i].note = props.scaleRef.current[randNote] + randPitch;\n      cubes[i].note_len = randLen + note_types[type_idx];\n      cubes[i].synth = new Tone.MembraneSynth(); // cubes[i].synth = new Tone.FMSynth();\n      //cubes[i].synth = new Tone.Synth();\n      //cubes[i].synth.chain(vibrato, reverb, Tone.Destination);\n\n      cubes[i].synth.chain(Tone.Destination);\n      cubes[i].dx = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dy = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dz = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1); // Define more random values :)\n      // Once the cube's counter reaches an arbitrary maximum, switch notes\n\n      cubes[i].counter = 0; // How many times can a note repeat before changing\n\n      cubes[i].max_repeats = Math.ceil(Math.random() * 8) + 1; //cubes[i].dy = 0;\n      //cubes[i].dz = 0;\n\n      scene.add(cube);\n    }\n\n    function animate() {\n      cubes.forEach(function (d, idx) {\n        d.rotation.x += dx;\n        d.rotation.y += dx; //const synth = new Tone.Synth().toDestination();\n\n        if (Math.abs(d.position.x) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, d.note_len); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.y) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, d.note_len); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.z) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, d.note_len); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (d.counter >= d.max_repeats) {\n          d.note = (props.scaleRef.current[i % scale_len] + (Math.floor(Math.random() * max_pitch) + min_pitch)).toString();\n          d.counter = 0;\n        } // d.position.x += dx;\n        // d.position.y += dy;\n        // d.position.z += dz;\n\n\n        d.position.x += d.dx;\n        d.position.y += d.dy;\n        d.position.z += d.dz; //Math.sin(Math.random(max)) * max\n      });\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  window.onload = main;\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  } // useEffect(() => {\n  //     sleep(5000);\n  //     main();\n  //   }, [props.anim]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Cube;\nexport default _c2 = /*#__PURE__*/React.memo(Cube);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Cube-Sounds/src/Cube.jsx"],"names":["OrbitControls","THREE","Tone","React","useEffect","Cube","props","main","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","max","geometry","BoxGeometry","bb","Math","E","bound","BoxHelper","Mesh","MeshBasicMaterial","add","controls","position","z","dx","dy","dz","scale_len","scaleRef","current","length","max_mult","min_speed","max_note_len","max_pitch","min_pitch","note_types","cubes","reverb","Reverb","delay","PingPongDelay","env","Envelope","vibrato","Vibrato","attackCurve","i","maxCubes","material","color","cube","randNote","floor","random","randPitch","randLen","type_idx","note","note_len","synth","MembraneSynth","chain","Destination","ceil","counter","max_repeats","animate","forEach","d","idx","rotation","x","y","abs","triggerAttackRelease","toString","requestAnimationFrame","render","onload","sleep","ms","Promise","resolve","setTimeout","memo"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,aAAT,QAA8B,8CAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAIrB,WAASC,IAAT,GAAgB;AAEd,UAAMC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAd;AACA,UAAMC,MAAM,GAAG,IAAIT,KAAK,CAACU,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAf;AAEA,UAAMC,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAV,EAAjB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA2BL,QAAQ,CAACM,UAApC,EAPc,CASd;;AACA,UAAMC,GAAG,GAAG,CAAZ,CAVc,CAYd;;AACA,QAAIC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,WAAV,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,CAAf;AAGA,QAAIC,EAAE,GAAG,IAAIxB,KAAK,CAACuB,WAAV,CAAsBF,GAAG,GAACI,IAAI,CAACC,CAA/B,EAAiCL,GAAG,GAACI,IAAI,CAACC,CAA1C,EAA4CL,GAAG,GAACI,IAAI,CAACC,CAArD,CAAT,CAhBc,CAkBd;;AACA,UAAMC,KAAK,GAAG,IAAI3B,KAAK,CAAC4B,SAAV,CAAoB,IAAI5B,KAAK,CAAC6B,IAAV,CAAeL,EAAf,EAAmB,IAAIxB,KAAK,CAAC8B,iBAAV,CAA6B,QAA7B,CAAnB,CAApB,EAAiF,QAAjF,CAAd;AAEAvB,IAAAA,KAAK,CAACwB,GAAN,CAAUJ,KAAV,EArBc,CAuBd;;AACA,UAAMK,QAAQ,GAAG,IAAIjC,aAAJ,CAAmBU,MAAnB,EAA2BK,QAAQ,CAACM,UAApC,CAAjB;AAEAX,IAAAA,MAAM,CAACwB,QAAP,CAAgBC,CAAhB,GAAoB,EAApB,CA1Bc,CA2Bd;;AAEA,QAAIC,EAAE,GAAG,IAAT;AACA,QAAIC,EAAE,GAAG,IAAT;AACA,QAAIC,EAAE,GAAG,IAAT,CA/Bc,CAiCd;;AACA,QAAIC,SAAS,GAAGjC,KAAK,CAACkC,QAAN,CAAeC,OAAf,CAAuBC,MAAvC,CAlCc,CAmCd;AAEA;AACA;;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,SAAS,GAAG,MAAhB,CAxCc,CA0Cd;AACA;AACA;;AACA,UAAMC,YAAY,GAAG,CAArB,CA7Cc,CA8Cd;;AACA,UAAMC,SAAS,GAAG,CAAlB,CA/Cc,CAgDd;;AACA,UAAMC,SAAS,GAAG,CAAlB,CAjDc,CAmDd;AACA;AACA;AACA;AACA;;AACA,UAAMC,UAAU,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,IAAT,CAAnB;AAIA,QAAIC,KAAK,GAAG,EAAZ;AAEA,UAAMC,MAAM,GAAG,IAAIhD,IAAI,CAACiD,MAAT,CAAgB,CAAhB,CAAf;AACA,UAAMC,KAAK,GAAG,IAAIlD,IAAI,CAACmD,aAAT,CAAuB,IAAvB,EAA6B,GAA7B,CAAd;AACA,UAAMC,GAAG,GAAG,IAAIpD,IAAI,CAACqD,QAAT,CAAkB,GAAlB,CAAZ;AACA,UAAMC,OAAO,GAAG,IAAItD,IAAI,CAACuD,OAAT,EAAhB;AAEAH,IAAAA,GAAG,CAACI,WAAJ,GAAkB,MAAlB,CAnEc,CAoEd;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGrD,KAAK,CAACsD,QAAzB,EAAmCD,CAAC,EAApC,EAAwC;AAGtC,YAAME,QAAQ,GAAG,IAAI5D,KAAK,CAAC8B,iBAAV,CAA6B;AAC5C+B,QAAAA,KAAK,EAAExD,KAAK,CAACwD,KAAN,CAAYH,CAAZ;AADqC,OAA7B,CAAjB;AAGA,YAAMI,IAAI,GAAG,IAAI9D,KAAK,CAAC6B,IAAV,CAAgBP,QAAhB,EAA0BsC,QAA1B,CAAb;AACAZ,MAAAA,KAAK,CAACU,CAAD,CAAL,GAAWI,IAAX;AAIA,UAAIC,QAAQ,GAAGtC,IAAI,CAACuC,KAAL,CAAWvC,IAAI,CAACwC,MAAL,KAAgB3B,SAA3B,CAAf;AACA,UAAI4B,SAAS,GAAGzC,IAAI,CAACuC,KAAL,CAAWvC,IAAI,CAACwC,MAAL,KAAgBpB,SAA3B,IAAwCC,SAAxD;AACA,UAAIqB,OAAO,GAAG,KAAK1C,IAAI,CAACuC,KAAL,CAAWvC,IAAI,CAACwC,MAAL,KAAgBrB,YAA3B,CAAnB;AACA,UAAIwB,QAAQ,GAAG3C,IAAI,CAACuC,KAAL,CAAWvC,IAAI,CAACwC,MAAL,KAAgBlB,UAAU,CAACN,MAAtC,CAAf;AAEAO,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASW,IAAT,GAAiBhE,KAAK,CAACkC,QAAN,CAAeC,OAAf,CAAuBuB,QAAvB,IAAmCG,SAApD;AAEAlB,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASY,QAAT,GAAqBH,OAAO,GAAGpB,UAAU,CAACqB,QAAD,CAAzC;AAEApB,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASa,KAAT,GAAiB,IAAItE,IAAI,CAACuE,aAAT,EAAjB,CApBsC,CAqBtC;AACA;AAEA;;AACAxB,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASa,KAAT,CAAeE,KAAf,CAAqBxE,IAAI,CAACyE,WAA1B;AAEA1B,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASvB,EAAT,GAAcQ,SAAS,GAAI,MAAIlB,IAAI,CAACkD,IAAL,CAAWlD,IAAI,CAACwC,MAAL,KAAgBvB,QAA3B,IAAsC,CAA1C,CAA3B;AACAM,MAAAA,KAAK,CAACU,CAAD,CAAL,CAAStB,EAAT,GAAcO,SAAS,GAAI,MAAIlB,IAAI,CAACkD,IAAL,CAAWlD,IAAI,CAACwC,MAAL,KAAgBvB,QAA3B,IAAsC,CAA1C,CAA3B;AACAM,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASrB,EAAT,GAAcM,SAAS,GAAI,MAAIlB,IAAI,CAACkD,IAAL,CAAWlD,IAAI,CAACwC,MAAL,KAAgBvB,QAA3B,IAAsC,CAA1C,CAA3B,CA7BsC,CA+BtC;AACA;;AACAM,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASkB,OAAT,GAAmB,CAAnB,CAjCsC,CAmCtC;;AACA5B,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASmB,WAAT,GAAwBpD,IAAI,CAACkD,IAAL,CAAWlD,IAAI,CAACwC,MAAL,KAAgB,CAA3B,IAA+B,CAAvD,CApCsC,CAsCtC;AACA;;AAEA1D,MAAAA,KAAK,CAACwB,GAAN,CAAU+B,IAAV;AAED;;AAGD,aAASgB,OAAT,GAAmB;AAGf9B,MAAAA,KAAK,CAAC+B,OAAN,CAAc,UAASC,CAAT,EAAWC,GAAX,EAAgB;AAE9BD,QAAAA,CAAC,CAACE,QAAF,CAAWC,CAAX,IAAgBhD,EAAhB;AACA6C,QAAAA,CAAC,CAACE,QAAF,CAAWE,CAAX,IAAgBjD,EAAhB,CAH8B,CAK9B;;AAEA,YAAGV,IAAI,CAAC4D,GAAL,CAASL,CAAC,CAAC/C,QAAF,CAAWkD,CAApB,KAA0B9D,GAA7B,EAAkC;AAChC2D,UAAAA,CAAC,CAACJ,OAAF;AACAI,UAAAA,CAAC,CAAC/C,QAAF,CAAWkD,CAAX,GAAe,CAAf;AACAH,UAAAA,CAAC,CAAC/C,QAAF,CAAWmD,CAAX,GAAe,CAAf;AACAJ,UAAAA,CAAC,CAAC/C,QAAF,CAAWC,CAAX,GAAe,CAAf;AACA8C,UAAAA,CAAC,CAACT,KAAF,CAAQe,oBAAR,CAA6BN,CAAC,CAACX,IAA/B,EAAqCW,CAAC,CAACV,QAAvC,EALgC,CAMhC;AACA;AACA;AAED;;AACD,YAAG7C,IAAI,CAAC4D,GAAL,CAASL,CAAC,CAAC/C,QAAF,CAAWmD,CAApB,KAA0B/D,GAA7B,EAAkC;AAChC2D,UAAAA,CAAC,CAACJ,OAAF;AACAI,UAAAA,CAAC,CAAC/C,QAAF,CAAWkD,CAAX,GAAe,CAAf;AACAH,UAAAA,CAAC,CAAC/C,QAAF,CAAWmD,CAAX,GAAe,CAAf;AACAJ,UAAAA,CAAC,CAAC/C,QAAF,CAAWC,CAAX,GAAe,CAAf;AACA8C,UAAAA,CAAC,CAACT,KAAF,CAAQe,oBAAR,CAA6BN,CAAC,CAACX,IAA/B,EAAqCW,CAAC,CAACV,QAAvC,EALgC,CAMhC;AACA;AACA;AACD;;AACD,YAAG7C,IAAI,CAAC4D,GAAL,CAASL,CAAC,CAAC/C,QAAF,CAAWC,CAApB,KAA0Bb,GAA7B,EAAkC;AAChC2D,UAAAA,CAAC,CAACJ,OAAF;AACAI,UAAAA,CAAC,CAAC/C,QAAF,CAAWkD,CAAX,GAAe,CAAf;AACAH,UAAAA,CAAC,CAAC/C,QAAF,CAAWmD,CAAX,GAAe,CAAf;AACAJ,UAAAA,CAAC,CAAC/C,QAAF,CAAWC,CAAX,GAAe,CAAf;AACA8C,UAAAA,CAAC,CAACT,KAAF,CAAQe,oBAAR,CAA6BN,CAAC,CAACX,IAA/B,EAAqCW,CAAC,CAACV,QAAvC,EALgC,CAMhC;AACA;AACA;AACD;;AACD,YAAGU,CAAC,CAACJ,OAAF,IAAaI,CAAC,CAACH,WAAlB,EAA+B;AAC7BG,UAAAA,CAAC,CAACX,IAAF,GAAS,CAAChE,KAAK,CAACkC,QAAN,CAAeC,OAAf,CAAuBkB,CAAC,GAAGpB,SAA3B,KAAyCb,IAAI,CAACuC,KAAL,CAAWvC,IAAI,CAACwC,MAAL,KAAgBpB,SAA3B,IAAwCC,SAAjF,CAAD,EAA8FyC,QAA9F,EAAT;AACAP,UAAAA,CAAC,CAACJ,OAAF,GAAY,CAAZ;AACD,SAzC6B,CA2C9B;AACA;AACA;;;AAEAI,QAAAA,CAAC,CAAC/C,QAAF,CAAWkD,CAAX,IAAgBH,CAAC,CAAC7C,EAAlB;AACA6C,QAAAA,CAAC,CAAC/C,QAAF,CAAWmD,CAAX,IAAgBJ,CAAC,CAAC5C,EAAlB;AACA4C,QAAAA,CAAC,CAAC/C,QAAF,CAAWC,CAAX,IAAgB8C,CAAC,CAAC3C,EAAlB,CAjD8B,CAkD9B;AAED,OApDC;AAuDFmD,MAAAA,qBAAqB,CAAEV,OAAF,CAArB;AACAhE,MAAAA,QAAQ,CAAC2E,MAAT,CAAiBlF,KAAjB,EAAwBE,MAAxB;AAED;;AAEDqE,IAAAA,OAAO;AAER;;AAGDnE,EAAAA,MAAM,CAAC+E,MAAP,GAAgBpF,IAAhB;;AAEA,WAASqF,KAAT,CAAeC,EAAf,EAAmB;AACjB,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD,GAhMoB,CAkMrB;AACA;AACA;AACA;;;AAEE,sBAEE;AAAA;AAAA;AAAA;AAAA,UAFF;AAMD;;KA7MQxF,I;AA+MT,kCAAeF,KAAK,CAAC8F,IAAN,CAAW5F,IAAX,CAAf","sourcesContent":["import './App.css';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as THREE from 'three';\r\nimport * as Tone from 'tone';\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction Cube(props) {\r\n\r\n\r\n\r\nfunction main() {\r\n\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  document.body.appendChild( renderer.domElement );\r\n\r\n  // L/W/H of the box - how far does a cube travel before resetting\r\n  const max = 4;\r\n\r\n  // Create standard box geometry\r\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\r\n\r\n\r\n  var bb = new THREE.BoxGeometry(max*Math.E,max*Math.E,max*Math.E);\r\n\r\n  // Create bounding box render\r\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\r\n\r\n  scene.add(bound);\r\n\r\n  // const controls = new THREE.OrbitControls( camera, renderer.domElement );\r\n  const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n  camera.position.z = 15;\r\n  //camera.position.y = 15;\r\n\r\n  var dx = 0.05;\r\n  var dy = 0.05;\r\n  var dz = 0.05;\r\n\r\n  // scale_len = the length of any major or minor scale\r\n  var scale_len = props.scaleRef.current.length;\r\n  //var max_speed = 0.002;\r\n\r\n  // Define base and max speed\r\n  // Then, generate a scalar up to max to multiply the base by\r\n  var max_mult = 5;\r\n  var min_speed = 0.0008;\r\n  \r\n  // Each note timing can range from 1-256\r\n  // This can be represented as a random power of 2 as\r\n  // 2**8 == 256 and 2**0 == 1\r\n  const max_note_len = 8;\r\n  // What is the maximum pitch notes can play at\r\n  const max_pitch = 3;\r\n  // What is the minimum pitch notes can play at\r\n  const min_pitch = 2;\r\n\r\n  // Notes can be represented by:\r\n  // n - regular note\r\n  // t - triplet\r\n  // n. - dotted note\r\n  // e.g. 4n. is a dotted quarter note\r\n  const note_types = ['n','t','n.'];\r\n  \r\n\r\n\r\n  var cubes = [];\r\n\r\n  const reverb = new Tone.Reverb(2);\r\n  const delay = new Tone.PingPongDelay(\"8n\", 0.2);\r\n  const env = new Tone.Envelope(0.4);\r\n  const vibrato = new Tone.Vibrato();\r\n\r\n  env.attackCurve = 'sine';\r\n  //env.triggerAttack();\r\n\r\n  for(var i = 0; i < props.maxCubes; i++) {\r\n\r\n\r\n    const material = new THREE.MeshBasicMaterial( { \r\n      color: props.color(i) } );\r\n\r\n    const cube = new THREE.Mesh( geometry, material );\r\n    cubes[i] = cube;\r\n\r\n\r\n\r\n    let randNote = Math.floor(Math.random() * scale_len);\r\n    let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\r\n    let randLen = 2 ** Math.floor(Math.random() * max_note_len);\r\n    let type_idx = Math.floor(Math.random() * note_types.length);\r\n\r\n    cubes[i].note = (props.scaleRef.current[randNote] + randPitch);\r\n\r\n    cubes[i].note_len = (randLen + note_types[type_idx]);\r\n\r\n    cubes[i].synth = new Tone.MembraneSynth();\r\n    // cubes[i].synth = new Tone.FMSynth();\r\n    //cubes[i].synth = new Tone.Synth();\r\n\r\n    //cubes[i].synth.chain(vibrato, reverb, Tone.Destination);\r\n    cubes[i].synth.chain(Tone.Destination);\r\n\r\n    cubes[i].dx = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n    cubes[i].dy = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n    cubes[i].dz = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n\r\n    // Define more random values :)\r\n    // Once the cube's counter reaches an arbitrary maximum, switch notes\r\n    cubes[i].counter = 0;\r\n\r\n    // How many times can a note repeat before changing\r\n    cubes[i].max_repeats = (Math.ceil((Math.random() * 8))+1);\r\n    \r\n    //cubes[i].dy = 0;\r\n    //cubes[i].dz = 0;\r\n\r\n    scene.add(cube);  \r\n\r\n  }\r\n\r\n\r\n  function animate() {\r\n\r\n\r\n      cubes.forEach(function(d,idx) {\r\n\r\n      d.rotation.x += dx;\r\n      d.rotation.y += dx;\r\n\r\n      //const synth = new Tone.Synth().toDestination();\r\n\r\n      if(Math.abs(d.position.x) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, d.note_len);\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n\r\n      }\r\n      if(Math.abs(d.position.y) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, d.note_len);\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n      if(Math.abs(d.position.z) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, d.note_len);\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n      if(d.counter >= d.max_repeats) {\r\n        d.note = (props.scaleRef.current[i % scale_len] + (Math.floor(Math.random() * max_pitch) + min_pitch)).toString();\r\n        d.counter = 0;\r\n      }\r\n\r\n      // d.position.x += dx;\r\n      // d.position.y += dy;\r\n      // d.position.z += dz;\r\n\r\n      d.position.x += d.dx;\r\n      d.position.y += d.dy;\r\n      d.position.z += d.dz;\r\n      //Math.sin(Math.random(max)) * max\r\n\r\n    });\r\n\r\n\r\n    requestAnimationFrame( animate );\r\n    renderer.render( scene, camera );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n}\r\n\r\n\r\nwindow.onload = main;\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n// useEffect(() => {\r\n//     sleep(5000);\r\n//     main();\r\n//   }, [props.anim]);\r\n\r\n  return (\r\n\r\n    <div>\r\n    </div> \r\n  \r\n  );\r\n}\r\n\r\nexport default React.memo(Cube);"]},"metadata":{},"sourceType":"module"}