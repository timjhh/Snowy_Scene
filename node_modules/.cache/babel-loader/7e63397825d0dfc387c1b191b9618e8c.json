{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport $ from 'jquery';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let scene;\n    let skybox;\n\n    function initScene() {\n      scene = new THREE.Scene(); //scene.background = new THREE.Color( 0x222244 );\n\n      scene.add(new THREE.AmbientLight(0x444444)); //scene.fog = new THREE.FogExp2(0xffffff)\n      //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \n      // Create snowy field plane\n\n      let planeGeom = new THREE.PlaneGeometry(10000, 10000);\n      let planeMesh = new THREE.MeshBasicMaterial({\n        color: 0xc2bfb8,\n        side: THREE.DoubleSide\n      });\n      var plane = new THREE.Mesh(planeGeom, planeMesh); // Rotate to viewable angle\n\n      plane.rotation.x = Math.PI / 2;\n      scene.add(plane);\n      const stars = [];\n      let numstars = 500;\n\n      const getRandomParticelPos = particleCount => {\n        const arr = new Float32Array(particleCount * 3);\n\n        for (let i = 0; i < particleCount; i++) {\n          arr[i] = (Math.random() - 0.5) * 10;\n        }\n\n        return arr;\n      };\n\n      let starGeom = new THREE.BufferGeometry();\n      let starMat = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      let star = new THREE.Mesh(starGeom, starMat);\n      star.position.x = Math.random() * 2000 - 1000;\n      star.position.y = Math.random() * 2000;\n      star.position.z = Math.random() * 2000; // starGeom.setAttribute(\n      //     \"position\",\n      //     new THREE.BufferAttribute(getRandomParticelPos(350), 3)\n      // );\n\n      scene.add(star); // for(var i = 0; i < numstars; i++) {\n      //   let x = Math.random() * 2000;\n      //   let y = Math.random() * 2000;\n      //   let z = Math.random() * 2000;\n      //   // const x = THREE.MathUtils.randFloatSpread(2000);\n      //   // const y = THREE.MathUtils.randFloatSpread(2000);\n      //   // const z = THREE.MathUtils.randFloatSpread(2000);\n      //   let sv = new THREE.Vector3(x,y,z);\n      //   stars.push(x,y,z);\n      // }\n      // const starGeom = new THREE.BufferGeometry();\n      // starGeom.setAttribute('position', new THREE.Float32BufferAttribute(stars, 3));\n      // const starMat = new THREE.PointsMaterial({ color: 0x888888 });\n      // const points = new THREE.Points(starGeom, starMat);\n      // console.log(points);\n      // scene.add(stars);\n      // // Manually load in skybox images\n      // const ft = new THREE.TextureLoader().load(\"/skybox/GTX_ft.png\");\n      // const bk = new THREE.TextureLoader().load(\"/skybox/GTX_bk.png\");\n      // const up = new THREE.TextureLoader().load(\"/skybox/GTX_up.png\");\n      // const dn = new THREE.TextureLoader().load(\"/skybox/GTX_dn.png\");\n      // const rt = new THREE.TextureLoader().load(\"/skybox/GTX_rt.png\");\n      // const lf = new THREE.TextureLoader().load(\"/skybox/GTX_lf.png\");\n      // // Create skybox\n      // let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\n      // let textures = [ft,bk,up,dn,lf,rt];\n      // let materials = [];\n      // textures.forEach(d => {\n      //     materials.push(new THREE.MeshBasicMaterial({ map: d, side: THREE.BackSide  }));\n      // });\n      // var skyMaterial = new THREE.MeshFaceMaterial(materials);\n      // skybox = new THREE.Mesh(skyGeom, materials);\n\n      scene.add(skybox); // skybox.position.x = 0;\n      // skybox.position.y = 1000;\n      // skybox.position.z = 0;\n    }\n\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 20000);\n    camera.position.set(0, 1000, 5000);\n    camera.lookAt(0, 0, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.setPixelRatio(window.devicePixelRatio); ///$(\".App\").append(renderer.domElement)\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.maxPolarAngle = Math.PI * 0.495;\n    controls.target.set(0, 500, 0);\n    controls.minDistance = 40.0;\n    controls.maxDistance = 200.0;\n    controls.update();\n    const clock = new THREE.Clock();\n    camera.position.z = 15;\n    initScene();\n\n    function animate() {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    } // Call animate method and get this gravy train rolling!\n\n\n    window.addEventListener('resize', onWindowResize, false);\n    animate();\n    document.body.appendChild(renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"head\", {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Snowy Scene\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        id: \"App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","THREE","OrbitControls","$","Legend","Cube","Environment","App","Component","constructor","props","componentDidMount","scene","skybox","initScene","Scene","add","AmbientLight","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","rotation","x","Math","PI","stars","numstars","getRandomParticelPos","particleCount","arr","Float32Array","i","random","starGeom","BufferGeometry","starMat","star","position","y","z","camera","PerspectiveCamera","window","innerWidth","innerHeight","set","lookAt","renderer","WebGLRenderer","antialias","setSize","toneMapping","ACESFilmicToneMapping","setPixelRatio","devicePixelRatio","controls","domElement","maxPolarAngle","target","minDistance","maxDistance","update","clock","Clock","animate","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","addEventListener","document","body","appendChild"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport $ from 'jquery';\r\n\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nclass App extends React.Component {\r\n\r\nconstructor(props) {\r\n  super(props);\r\n\r\n}\r\n\r\ncomponentDidMount() {\r\n\r\n\r\n\r\n\r\n\r\nlet scene;\r\nlet skybox;\r\n\r\n\r\nfunction initScene() {\r\n\r\n  scene = new THREE.Scene();\r\n  //scene.background = new THREE.Color( 0x222244 );\r\n  scene.add( new THREE.AmbientLight( 0x444444 ) );\r\n  //scene.fog = new THREE.FogExp2(0xffffff)\r\n  //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \r\n\r\n  // Create snowy field plane\r\n  let planeGeom = new THREE.PlaneGeometry(10000,10000);\r\n  let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  // Rotate to viewable angle\r\n  plane.rotation.x = Math.PI / 2;\r\n\r\n\r\n\r\n\r\n  scene.add(plane);\r\n\r\n\r\n  const stars = [];\r\n  let numstars = 500;\r\n\r\n  const getRandomParticelPos = (particleCount) => {\r\n    const arr = new Float32Array(particleCount * 3);\r\n    for (let i = 0; i < particleCount; i++) {\r\n      arr[i] = (Math.random() - 0.5) * 10;\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  let starGeom = new THREE.BufferGeometry();\r\n  let starMat = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n  let star = new THREE.Mesh(starGeom, starMat);\r\n\r\n  star.position.x = (Math.random() * 2000) - 1000;\r\n  star.position.y = Math.random() * 2000;\r\n  star.position.z = Math.random() * 2000;\r\n\r\n\r\n  // starGeom.setAttribute(\r\n  //     \"position\",\r\n  //     new THREE.BufferAttribute(getRandomParticelPos(350), 3)\r\n  // );\r\n\r\n\r\n  scene.add(star);\r\n\r\n\r\n  // for(var i = 0; i < numstars; i++) {\r\n\r\n\r\n  //   let x = Math.random() * 2000;\r\n  //   let y = Math.random() * 2000;\r\n  //   let z = Math.random() * 2000;\r\n  //   // const x = THREE.MathUtils.randFloatSpread(2000);\r\n  //   // const y = THREE.MathUtils.randFloatSpread(2000);\r\n  //   // const z = THREE.MathUtils.randFloatSpread(2000);\r\n    \r\n  //   let sv = new THREE.Vector3(x,y,z);\r\n\r\n  //   stars.push(x,y,z);\r\n\r\n  // }\r\n\r\n  // const starGeom = new THREE.BufferGeometry();\r\n  // starGeom.setAttribute('position', new THREE.Float32BufferAttribute(stars, 3));\r\n\r\n  // const starMat = new THREE.PointsMaterial({ color: 0x888888 });\r\n\r\n  // const points = new THREE.Points(starGeom, starMat);\r\n  // console.log(points);\r\n  // scene.add(stars);\r\n\r\n\r\n  // // Manually load in skybox images\r\n  // const ft = new THREE.TextureLoader().load(\"/skybox/GTX_ft.png\");\r\n  // const bk = new THREE.TextureLoader().load(\"/skybox/GTX_bk.png\");\r\n  // const up = new THREE.TextureLoader().load(\"/skybox/GTX_up.png\");\r\n  // const dn = new THREE.TextureLoader().load(\"/skybox/GTX_dn.png\");\r\n  // const rt = new THREE.TextureLoader().load(\"/skybox/GTX_rt.png\");\r\n  // const lf = new THREE.TextureLoader().load(\"/skybox/GTX_lf.png\");\r\n\r\n  // // Create skybox\r\n  // let skyGeom = new THREE.BoxGeometry(10000, 10000, 10000);\r\n  // let textures = [ft,bk,up,dn,lf,rt];\r\n  // let materials = [];\r\n\r\n  // textures.forEach(d => {\r\n\r\n  //     materials.push(new THREE.MeshBasicMaterial({ map: d, side: THREE.BackSide  }));\r\n\r\n  // });\r\n\r\n  // var skyMaterial = new THREE.MeshFaceMaterial(materials);\r\n  // skybox = new THREE.Mesh(skyGeom, materials);\r\n\r\n  scene.add(skybox);\r\n  // skybox.position.x = 0;\r\n  // skybox.position.y = 1000;\r\n  // skybox.position.z = 0;\r\n\r\n}\r\n  \r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 20000 );\r\n\r\n    camera.position.set(0,1000,5000);\r\n    camera.lookAt(0,0,0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\r\n    ///$(\".App\").append(renderer.domElement)\r\n\r\n\r\n\r\n    const controls = new OrbitControls( camera, renderer.domElement );\r\n    controls.maxPolarAngle = Math.PI * 0.495;\r\n    controls.target.set( 0, 500, 0 );\r\n    controls.minDistance = 40.0;\r\n    controls.maxDistance = 200.0;\r\n    controls.update();\r\n\r\n\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n\r\n\r\n    camera.position.z = 15;\r\n    initScene();\r\n    function animate() {\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  function onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  // Call animate method and get this gravy train rolling!\r\n  window.addEventListener('resize', onWindowResize, false);\r\n  animate();\r\n\r\n    document.body.appendChild( renderer.domElement );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    \r\n    <div className=\"App\" id=\"App\">\r\n\r\n{/*        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Environment />*/}\r\n\r\n\r\n\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}