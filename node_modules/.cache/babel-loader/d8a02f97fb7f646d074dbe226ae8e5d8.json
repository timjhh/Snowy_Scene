{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Cube-Sounds\\\\src\\\\Cube.jsx\";\nimport './App.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as THREE from 'three';\nimport * as Tone from 'tone';\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cube(props) {\n  function main() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const max = 5; // Create standard box geometry\n\n    var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var bb = new THREE.BoxGeometry(max * Math.E, max * Math.E, max * Math.E); // Create bounding box render\n\n    const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff);\n    scene.add(bound); // const controls = new THREE.OrbitControls( camera, renderer.domElement );\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.z = 15; //camera.position.y = 15;\n\n    var dx = 0.05;\n    var dy = 0.05;\n    var dz = 0.05; // scale_len = the length of any major or minor scale\n\n    var scale_len = props.scaleRef.current.length;\n    var max_speed = 0.02; // Define base and max speed\n    // Then, generate a scalar up to max to multiply the base by\n\n    var max_mult = 5;\n    var min_speed = 0.002;\n    var cubes = [];\n    const reverb = new Tone.Reverb(1);\n    const delay = new Tone.PingPongDelay(\"8n\", 0.2);\n\n    for (var i = 0; i < props.maxCubes; i++) {\n      const material = new THREE.MeshBasicMaterial({\n        color: props.color(i)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cubes[i] = cube;\n      let randNote = Math.floor(Math.random() * scale_len);\n      cubes[i].note = (props.scaleRef.current[randNote] + Math.floor(Math.random() * 7)).toString();\n      cubes[i].synth = new Tone.MembraneSynth(); //cubes[i].synth = new Tone.FMSynth();\n      //cubes[i].synth.chain(reverb, delay, Tone.Destination);\n\n      cubes[i].synth.chain(Tone.Destination);\n      cubes[i].dx = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dy = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dz = min_speed * 2 ** (Math.ceil(Math.random() * max_mult) + 1); // Define more random values :)\n      // Once the cube's counter reaches an arbitrary maximum, switch notes\n\n      cubes[i].counter = 0;\n      cubes[i].max = Math.ceil(Math.random() * 8) + 1; //cubes[i].dy = 0;\n      //cubes[i].dz = 0;\n\n      scene.add(cube);\n    }\n\n    console.log(props.scaleRef);\n\n    function animate() {\n      cubes.forEach(function (d, idx) {\n        //d.rotation.x += dx;\n        //d.rotation.y += dx;\n        //const synth = new Tone.Synth().toDestination();\n        if (Math.abs(d.position.x) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.y) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.z) >= max) {\n          d.counter++;\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (d.counter >= d.max) {\n          d.note = (props.scaleRef.current[i % scale_len] + Math.floor(Math.random() * 7)).toString();\n          d.counter = 0;\n        } // d.position.x += dx;\n        // d.position.y += dy;\n        // d.position.z += dz;\n\n\n        d.position.x += d.dx;\n        d.position.y += d.dy;\n        d.position.z += d.dz; //Math.sin(Math.random(max)) * max\n      });\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  window.onload = main;\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  } // useEffect(() => {\n  //     sleep(5000);\n  //     main();\n  //   }, [props.anim]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Cube;\nexport default _c2 = /*#__PURE__*/React.memo(Cube);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Cube-Sounds/src/Cube.jsx"],"names":["OrbitControls","THREE","Tone","React","useEffect","Cube","props","main","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","max","geometry","BoxGeometry","bb","Math","E","bound","BoxHelper","Mesh","MeshBasicMaterial","add","controls","position","z","dx","dy","dz","scale_len","scaleRef","current","length","max_speed","max_mult","min_speed","cubes","reverb","Reverb","delay","PingPongDelay","i","maxCubes","material","color","cube","randNote","floor","random","note","toString","synth","MembraneSynth","chain","Destination","ceil","counter","console","log","animate","forEach","d","idx","abs","x","y","triggerAttackRelease","requestAnimationFrame","render","onload","sleep","ms","Promise","resolve","setTimeout","memo"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as THREE from 'three';\r\nimport * as Tone from 'tone';\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction Cube(props) {\r\n\r\n\r\n\r\nfunction main() {\r\n\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  document.body.appendChild( renderer.domElement );\r\n\r\n\r\n  const max = 5;\r\n\r\n  // Create standard box geometry\r\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\r\n\r\n\r\n  var bb = new THREE.BoxGeometry(max*Math.E,max*Math.E,max*Math.E);\r\n\r\n  // Create bounding box render\r\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\r\n\r\n  scene.add(bound);\r\n\r\n  // const controls = new THREE.OrbitControls( camera, renderer.domElement );\r\n  const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n  camera.position.z = 15;\r\n  //camera.position.y = 15;\r\n\r\n  var dx = 0.05;\r\n  var dy = 0.05;\r\n  var dz = 0.05;\r\n\r\n  // scale_len = the length of any major or minor scale\r\n  var scale_len = props.scaleRef.current.length;\r\n  var max_speed = 0.02;\r\n\r\n  // Define base and max speed\r\n  // Then, generate a scalar up to max to multiply the base by\r\n  var max_mult = 5;\r\n  var min_speed = 0.002;\r\n  \r\n  var cubes = [];\r\n\r\n  const reverb = new Tone.Reverb(1);\r\n  const delay = new Tone.PingPongDelay(\"8n\", 0.2);\r\n\r\n  for(var i = 0; i < props.maxCubes; i++) {\r\n\r\n\r\n    const material = new THREE.MeshBasicMaterial( { \r\n      color: props.color(i) } );\r\n\r\n    const cube = new THREE.Mesh( geometry, material );\r\n    cubes[i] = cube;\r\n\r\n\r\n    let randNote = Math.floor(Math.random() * scale_len);\r\n    cubes[i].note = (props.scaleRef.current[randNote] + Math.floor(Math.random() * 7)).toString();\r\n    \r\n    cubes[i].synth = new Tone.MembraneSynth();\r\n    //cubes[i].synth = new Tone.FMSynth();\r\n\r\n    //cubes[i].synth.chain(reverb, delay, Tone.Destination);\r\n    cubes[i].synth.chain(Tone.Destination);\r\n\r\n    cubes[i].dx = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n    cubes[i].dy = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n    cubes[i].dz = min_speed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n\r\n    // Define more random values :)\r\n    // Once the cube's counter reaches an arbitrary maximum, switch notes\r\n    cubes[i].counter = 0;\r\n    cubes[i].max = (Math.ceil((Math.random() * 8))+1);\r\n\r\n    //cubes[i].dy = 0;\r\n    //cubes[i].dz = 0;\r\n\r\n    scene.add(cube);  \r\n\r\n  }\r\n\r\n  console.log(props.scaleRef);\r\n\r\n\r\n  function animate() {\r\n\r\n\r\n      cubes.forEach(function(d,idx) {\r\n\r\n      //d.rotation.x += dx;\r\n      //d.rotation.y += dx;\r\n\r\n      //const synth = new Tone.Synth().toDestination();\r\n\r\n      if(Math.abs(d.position.x) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n\r\n      }\r\n      if(Math.abs(d.position.y) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n      if(Math.abs(d.position.z) >= max) {\r\n        d.counter++;\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n      if(d.counter >= d.max) {\r\n        d.note = (props.scaleRef.current[i % scale_len] + Math.floor(Math.random() * 7)).toString();\r\n        d.counter = 0;\r\n      }\r\n\r\n      // d.position.x += dx;\r\n      // d.position.y += dy;\r\n      // d.position.z += dz;\r\n\r\n      d.position.x += d.dx;\r\n      d.position.y += d.dy;\r\n      d.position.z += d.dz;\r\n      //Math.sin(Math.random(max)) * max\r\n\r\n    });\r\n\r\n\r\n    requestAnimationFrame( animate );\r\n    renderer.render( scene, camera );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n}\r\n\r\n\r\nwindow.onload = main;\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n// useEffect(() => {\r\n//     sleep(5000);\r\n//     main();\r\n//   }, [props.anim]);\r\n\r\n  return (\r\n\r\n    <div>\r\n    </div> \r\n  \r\n  );\r\n}\r\n\r\nexport default React.memo(Cube);"]},"metadata":{},"sourceType":"module"}