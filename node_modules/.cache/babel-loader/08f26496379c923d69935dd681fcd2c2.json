{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport $ from 'jquery';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let scene;\n    let skybox;\n\n    function initScene() {\n      scene = new THREE.Scene(); //scene.background = new THREE.Color( 0x222244 );\n\n      scene.add(new THREE.AmbientLight(0x444444)); //scene.fog = new THREE.FogExp2(0xffffff)\n      //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \n      // Create snowy field plane\n\n      let planeGeom = new THREE.PlaneGeometry(5000, 5000);\n      let planeMesh = new THREE.MeshBasicMaterial({\n        color: 0xc2bfb8,\n        side: THREE.DoubleSide\n      });\n      var plane = new THREE.Mesh(planeGeom, planeMesh); // Rotate to viewable angle\n\n      plane.rotation.x = Math.PI / 2;\n      scene.add(plane);\n      let numStars = 4000; // Maximum distance star can take\n\n      var max = 10000; // Range to extend stars around plane\n      // If we generate a # [-100,100], range=10 will\n      // extend the # to [-1000,1000]\n\n      var range = 4; // GENERATE A RANDOM # OF STARS\n\n      for (var i = 0; i < numStars; i++) {\n        let starGeom = new THREE.BoxGeometry(1, 1, 1);\n        let starMat = new THREE.MeshBasicMaterial({\n          color: 0xffffff\n        });\n        let star = new THREE.Mesh(starGeom, starMat);\n        star.position.x = (max / 2 - Math.random() * max) * range; // Only positive values allowed\n\n        star.position.y = Math.random() * max;\n        star.position.z = (max / 2 - Math.random() * max) * range;\n        star.scale.x = star.scale.y = 8;\n        scene.add(star);\n      }\n\n      let moonGeom = new THREE.SphereGeometry(400, 100, 100);\n      let moonMat = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      let moon = new THREE.Mesh(moonGeom, moonMat);\n      let moonLight = new THREE.DirectionalLight(color, intensity);\n      moonLight.position.set(5000, 5000, 5000);\n      moonLight.target.position.set(0, 0, 0);\n      moon.position.x = 5000;\n      moon.position.y = 5000;\n      moon.position.z = 5000;\n      scene.add(moon);\n    }\n\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 20000);\n    camera.position.set(0, 5000, 0);\n    camera.lookAt(0, 0, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.setPixelRatio(window.devicePixelRatio); ///$(\".App\").append(renderer.domElement)\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.maxPolarAngle = Math.PI * 0.495;\n    controls.target.set(0, 500, 0);\n    controls.minDistance = 40.0;\n    controls.maxDistance = 200.0;\n    controls.update();\n    const clock = new THREE.Clock();\n    camera.position.z = 15;\n    initScene();\n\n    function animate() {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    } // Call animate method and get this gravy train rolling!\n\n\n    window.addEventListener('resize', onWindowResize, false);\n    animate();\n    document.body.appendChild(renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"head\", {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Snowy Scene\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        id: \"App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","THREE","OrbitControls","$","Legend","Cube","Environment","App","Component","constructor","props","componentDidMount","scene","skybox","initScene","Scene","add","AmbientLight","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","rotation","x","Math","PI","numStars","max","range","i","starGeom","BoxGeometry","starMat","star","position","random","y","z","scale","moonGeom","SphereGeometry","moonMat","moon","moonLight","DirectionalLight","intensity","set","target","camera","PerspectiveCamera","window","innerWidth","innerHeight","lookAt","renderer","WebGLRenderer","antialias","setSize","toneMapping","ACESFilmicToneMapping","setPixelRatio","devicePixelRatio","controls","domElement","maxPolarAngle","minDistance","maxDistance","update","clock","Clock","animate","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","addEventListener","document","body","appendChild"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport $ from 'jquery';\r\n\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nclass App extends React.Component {\r\n\r\nconstructor(props) {\r\n  super(props);\r\n\r\n}\r\n\r\ncomponentDidMount() {\r\n\r\n\r\n\r\n\r\n\r\nlet scene;\r\nlet skybox;\r\n\r\n\r\nfunction initScene() {\r\n\r\n  scene = new THREE.Scene();\r\n  //scene.background = new THREE.Color( 0x222244 );\r\n  scene.add( new THREE.AmbientLight( 0x444444 ) );\r\n  //scene.fog = new THREE.FogExp2(0xffffff)\r\n  //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \r\n\r\n  // Create snowy field plane\r\n  let planeGeom = new THREE.PlaneGeometry(5000,5000);\r\n  let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  // Rotate to viewable angle\r\n  plane.rotation.x = Math.PI / 2;\r\n\r\n  scene.add(plane);\r\n\r\n\r\n\r\n  let numStars = 4000;\r\n\r\n  // Maximum distance star can take\r\n  var max = 10000;\r\n\r\n  // Range to extend stars around plane\r\n  // If we generate a # [-100,100], range=10 will\r\n  // extend the # to [-1000,1000]\r\n  var range = 4;\r\n\r\n  // GENERATE A RANDOM # OF STARS\r\n  for(var i = 0; i < numStars; i++) {\r\n\r\n\r\n    let starGeom = new THREE.BoxGeometry(1, 1, 1);\r\n    let starMat = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n    let star = new THREE.Mesh(starGeom, starMat);\r\n\r\n    \r\n    star.position.x = ((max/2) - (Math.random() * max)) * range;\r\n\r\n    // Only positive values allowed\r\n    star.position.y = (Math.random() * max);\r\n    \r\n\r\n    star.position.z = ((max/2) - (Math.random() * max)) * range;\r\n    \r\n\r\n    star.scale.x = star.scale.y = 8;\r\n\r\n\r\n    scene.add(star);\r\n\r\n  }\r\n\r\n  let moonGeom = new THREE.SphereGeometry(400, 100, 100);\r\n  let moonMat = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n  let moon = new THREE.Mesh(moonGeom, moonMat);\r\n\r\n  let moonLight = new THREE.DirectionalLight(color,intensity);\r\n  moonLight.position.set(5000,5000,5000);\r\n  moonLight.target.position.set(0,0,0);\r\n\r\n  moon.position.x = 5000;\r\n  moon.position.y = 5000;\r\n  moon.position.z = 5000;\r\n\r\n  scene.add(moon);\r\n\r\n\r\n\r\n}\r\n  \r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 20000 );\r\n\r\n    camera.position.set(0,5000,0);\r\n    camera.lookAt(0,0,0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\r\n    ///$(\".App\").append(renderer.domElement)\r\n\r\n\r\n\r\n    const controls = new OrbitControls( camera, renderer.domElement );\r\n    controls.maxPolarAngle = Math.PI * 0.495;\r\n    controls.target.set( 0, 500, 0 );\r\n    controls.minDistance = 40.0;\r\n    controls.maxDistance = 200.0;\r\n    controls.update();\r\n\r\n\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n\r\n\r\n    camera.position.z = 15;\r\n    initScene();\r\n    function animate() {\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  function onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  // Call animate method and get this gravy train rolling!\r\n  window.addEventListener('resize', onWindowResize, false);\r\n  animate();\r\n\r\n    document.body.appendChild( renderer.domElement );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    \r\n    <div className=\"App\" id=\"App\">\r\n\r\n{/*        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Environment />*/}\r\n\r\n\r\n\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}