{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Three.js-Example\\\\cube-notes\\\\src\\\\Cube.jsx\";\nimport './App.css';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as THREE from 'three';\nimport * as Tone from 'tone';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cube(props) {\n  function main() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const max = 4; // Create standard box geometry\n\n    var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var bb = new THREE.BoxGeometry(max * Math.E, max * Math.E, max * Math.E);\n    const cr = new THREE.Color(\"#\" + Math.floor(Math.random() * 16777215).toString(16)); // Create bounding box render\n\n    const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff);\n    scene.add(bound); // const controls = new THREE.OrbitControls( camera, renderer.domElement );\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const rv = new THREE.Vector2(scene.getSize);\n    camera.position.z = 15; //camera.position.y = 15;\n\n    var dx = 0.05;\n    var dy = 0.05;\n    var dz = 0.05;\n    var scale_len = props.scaleRef.current.length;\n    var max_speed = 0.05; // Define base and max speed\n    // Then, generate a scalar up to max to multiply the base by\n\n    var max_mult = 20;\n    var min_speed = 0.002;\n    var cubes = [];\n    const reverb = new Tone.Reverb(1);\n    const delay = new Tone.PingPongDelay(\"16n\", 0.2);\n\n    for (var i = 0; i < props.maxCubes; i++) {\n      const material = new THREE.MeshBasicMaterial({\n        color: props.color(i)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cubes[i] = cube;\n      cubes[i].note = (props.scaleRef.current[i % scale_len] + Math.floor(Math.random() * 7)).toString(); // cubes[i].synth = new Tone.MembraneSynth();\n\n      cubes[i].synth = new Tone.FMSynth();\n      cubes[i].synth.chain(delay, Tone.Destination);\n      cubes[i].dx = min_speed * (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dy = min_speed * (Math.ceil(Math.random() * max_mult) + 1);\n      cubes[i].dz = min_speed * (Math.ceil(Math.random() * max_mult) + 1); //cubes[i].dy = 0;\n      //cubes[i].dz = 0;\n\n      scene.add(cube);\n    }\n\n    console.log(props.scaleRef);\n\n    function animate() {\n      cubes.forEach(function (d, idx) {\n        //d.rotation.x += dx;\n        //d.rotation.y += dx;\n        //const synth = new Tone.Synth().toDestination();\n        if (Math.abs(d.position.x) >= max) {\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.y) >= max) {\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        }\n\n        if (Math.abs(d.position.z) >= max) {\n          d.position.x = 0;\n          d.position.y = 0;\n          d.position.z = 0;\n          d.synth.triggerAttackRelease(d.note, \"8n\"); // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n          // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n        } // d.position.x += dx;\n        // d.position.y += dy;\n        // d.position.z += dz;\n\n\n        d.position.x += d.dx;\n        d.position.y += d.dy;\n        d.position.z += d.dz; //Math.sin(Math.random(max)) * max\n      });\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  window.onload = main;\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Cube;\nexport default _c2 = /*#__PURE__*/React.memo(Cube);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Three.js-Example/cube-notes/src/Cube.jsx"],"names":["OrbitControls","THREE","Tone","React","Cube","props","main","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","max","geometry","BoxGeometry","bb","Math","E","cr","Color","floor","random","toString","bound","BoxHelper","Mesh","MeshBasicMaterial","add","controls","rv","Vector2","getSize","position","z","dx","dy","dz","scale_len","scaleRef","current","length","max_speed","max_mult","min_speed","cubes","reverb","Reverb","delay","PingPongDelay","i","maxCubes","material","color","cube","note","synth","FMSynth","chain","Destination","ceil","console","log","animate","forEach","d","idx","abs","x","y","triggerAttackRelease","requestAnimationFrame","render","onload","memo"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as THREE from 'three';\r\nimport * as Tone from 'tone';\r\nimport React from 'react';\r\n\r\nfunction Cube(props) {\r\n\r\n\r\n\r\nfunction main() {\r\n\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  document.body.appendChild( renderer.domElement );\r\n\r\n\r\n  const max = 4;\r\n\r\n  // Create standard box geometry\r\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\r\n\r\n\r\n  var bb = new THREE.BoxGeometry(max*Math.E,max*Math.E,max*Math.E);\r\n\r\n\r\n  const cr = new THREE.Color(\"#\" + Math.floor(Math.random()*16777215).toString(16));\r\n\r\n  // Create bounding box render\r\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\r\n\r\n\r\n  scene.add(bound);\r\n\r\n  // const controls = new THREE.OrbitControls( camera, renderer.domElement );\r\n  const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n  const rv = new THREE.Vector2(scene.getSize);\r\n\r\n  camera.position.z = 15;\r\n  //camera.position.y = 15;\r\n\r\n\r\n  var dx = 0.05;\r\n  var dy = 0.05;\r\n  var dz = 0.05;\r\n\r\n  var scale_len = props.scaleRef.current.length;\r\n  var max_speed = 0.05;\r\n\r\n  // Define base and max speed\r\n  // Then, generate a scalar up to max to multiply the base by\r\n  var max_mult = 20;\r\n  var min_speed = 0.002;\r\n  \r\n  var cubes = [];\r\n\r\n  const reverb = new Tone.Reverb(1);\r\n  const delay = new Tone.PingPongDelay(\"16n\", 0.2);\r\n\r\n  for(var i = 0; i < props.maxCubes; i++) {\r\n\r\n\r\n    const material = new THREE.MeshBasicMaterial( { \r\n      color: props.color(i) } );\r\n\r\n    const cube = new THREE.Mesh( geometry, material );\r\n    cubes[i] = cube;\r\n\r\n    cubes[i].note = (props.scaleRef.current[i % scale_len] + Math.floor(Math.random() * 7)).toString();\r\n    // cubes[i].synth = new Tone.MembraneSynth();\r\n    cubes[i].synth = new Tone.FMSynth();\r\n\r\n    cubes[i].synth.chain(delay, Tone.Destination);\r\n\r\n    cubes[i].dx = min_speed * (Math.ceil((Math.random() * max_mult))+1);\r\n    cubes[i].dy = min_speed * (Math.ceil((Math.random() * max_mult))+1);\r\n    cubes[i].dz = min_speed * (Math.ceil((Math.random() * max_mult))+1);\r\n\r\n    //cubes[i].dy = 0;\r\n    //cubes[i].dz = 0;\r\n\r\n    scene.add(cube);  \r\n\r\n  }\r\n\r\n  console.log(props.scaleRef);\r\n\r\n\r\n  function animate() {\r\n\r\n\r\n      cubes.forEach(function(d,idx) {\r\n\r\n      //d.rotation.x += dx;\r\n      //d.rotation.y += dx;\r\n\r\n      //const synth = new Tone.Synth().toDestination();\r\n\r\n      if(Math.abs(d.position.x) >= max) {\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n\r\n      }\r\n      if(Math.abs(d.position.y) >= max) {\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n      if(Math.abs(d.position.z) >= max) {\r\n        d.position.x = 0;\r\n        d.position.y = 0;\r\n        d.position.z = 0;\r\n        d.synth.triggerAttackRelease(d.note, \"8n\");\r\n        // d.dx = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dy = Math.sin((Math.random()-0.5)) * max_speed;\r\n        // d.dz = Math.sin((Math.random()-0.5)) * max_speed;\r\n      }\r\n\r\n\r\n      // d.position.x += dx;\r\n      // d.position.y += dy;\r\n      // d.position.z += dz;\r\n\r\n      d.position.x += d.dx;\r\n      d.position.y += d.dy;\r\n      d.position.z += d.dz;\r\n      //Math.sin(Math.random(max)) * max\r\n\r\n    });\r\n\r\n    requestAnimationFrame( animate );\r\n    renderer.render( scene, camera );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n}\r\n\r\n\r\nwindow.onload = main;\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default React.memo(Cube);"]},"metadata":{},"sourceType":"module"}