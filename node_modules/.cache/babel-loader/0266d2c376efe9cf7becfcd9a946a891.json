{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Three.js-Example\\\\cube-notes\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  function main() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const max = 4; // Create standard box geometry\n\n    var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    var bb = new THREE.BoxGeometry(max * Math.E, max * Math.E, max * Math.E);\n    const material = new THREE.MeshBasicMaterial({\n      color: 'purple'\n    });\n    const col = new THREE.Color(0xffffff);\n    col.setHex(Math.random() * 0xffffff); // const m2 = new THREE.MeshLambertMaterial( { color: col } );\n    // const m3 = new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } );\n    // const material = new THREE.MeshStandardMaterial( { \n    // color: 0x00ff00 } );\n\n    const cr = new THREE.Color(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    const m2 = new THREE.MeshStandardMaterial({\n      color: cr\n    });\n    const box = new THREE.Box3(); // Create bounding box render\n\n    const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff); // const cube = new THREE.Mesh( geometry, material );\n    // const cube2 = new THREE.Mesh( geometry, material );\n    // const cube3 = new THREE.Mesh( geometry, m2 );\n    // scene.add(cube);\n    // scene.add(cube2);\n    //scene.add(cube3);\n\n    console.log(new THREE.Vector2(renderer.getSize));\n    scene.add(bound);\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    const rv = new THREE.Vector2(scene.getSize);\n    camera.position.z = 15; //camera.position.y = 15;\n    //camera.rotation.z = Math.PI/4;\n\n    console.log(rv);\n    var dx = 0.05;\n    var dy = 0.05;\n    var dz = 0.05;\n    var max_cubes = 50;\n    var max_speed = 0.1;\n    var cubes = []; //let colorC = (d) => d3.interpolateMagma( parseInt(d) / max_cubes );\n\n    let colorC = d => d3.interpolateTurbo(parseInt(d) / max_cubes);\n\n    function rgbToHex(r, g, b) {\n      return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    }\n\n    for (var i = 0; i < max_cubes; i++) {\n      const material = new THREE.MeshBasicMaterial({\n        color: colorC(i)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cubes[i] = cube;\n      cubes[i].dx = Math.sin(Math.random() - 0.5) * max_speed;\n      cubes[i].dy = Math.sin(Math.random() - 0.5) * max_speed;\n      cubes[i].dz = Math.sin(Math.random() - 0.5) * max_speed;\n      scene.add(cube); // cube.position.x = Math.sin(Math.random(max)) * max;\n      // cube.position.y = Math.sin(Math.random(max)) * max;\n      // cube.position.z = Math.sin(Math.random(max)) * max;\n    }\n\n    function animate() {\n      cubes.forEach(function (d, idx) {\n        //d.rotation.x += dx;\n        //d.rotation.y += dx;\n        // if(Math.abs(d.position.x) >= max) dx = -dx;\n        // if(Math.abs(d.position.y) >= max) dy = -dy;\n        // if(Math.abs(d.position.z) >= 1) dz = -dz;\n        //var clr = colorC(idx);\n        //d.material.color.setHex(rgbToHex(clr.r,clr.g,clr.b));\n        //d.material.needsUpdate = true;\n        // if(Math.abs(d.position.x) >= max) d.position.x = 0;\n        // if(Math.abs(d.position.y) >= max) d.position.y = 0;\n        // if(Math.abs(d.position.z) >= 1) d.position.z = 0;\n        if (Math.abs(d.position.x) >= max) {\n          d.position.x = 0;\n          d.dx = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dy = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dz = Math.sin(Math.random() - 0.5) * max_speed;\n        }\n\n        if (Math.abs(d.position.y) >= max) {\n          d.position.y = 0;\n          d.dx = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dy = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dz = Math.sin(Math.random() - 0.5) * max_speed;\n        }\n\n        if (Math.abs(d.position.z) >= max) {\n          d.position.z = 0;\n          d.dx = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dy = Math.sin(Math.random() - 0.5) * max_speed;\n          d.dz = Math.sin(Math.random() - 0.5) * max_speed;\n        } // d.position.x += dx;\n        // d.position.y += dy;\n        // d.position.z += dz;\n\n\n        d.position.x += d.dx;\n        d.position.y += d.dy;\n        d.position.z += d.dz; //Math.sin(Math.random(max)) * max\n      });\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  window.onload = main;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"3d Cube\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Three.js-Example/cube-notes/src/App.js"],"names":["App","main","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","max","geometry","BoxGeometry","bb","Math","E","material","MeshBasicMaterial","color","col","Color","setHex","random","cr","floor","toString","m2","MeshStandardMaterial","box","Box3","bound","BoxHelper","Mesh","console","log","Vector2","getSize","add","controls","OrbitControls","rv","position","z","dx","dy","dz","max_cubes","max_speed","cubes","colorC","d","d3","interpolateTurbo","parseInt","rgbToHex","r","g","b","componentToHex","i","cube","sin","animate","forEach","idx","abs","x","y","requestAnimationFrame","render","onload"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n\n  \nfunction main() {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize( window.innerWidth, window.innerHeight );\n  document.body.appendChild( renderer.domElement );\n\n\n  const max = 4;\n\n  // Create standard box geometry\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\n\n\n  var bb = new THREE.BoxGeometry(max*Math.E,max*Math.E,max*Math.E);\n\n\n\n  const material = new THREE.MeshBasicMaterial( { \n    color: 'purple' } );\n\n  const col = new THREE.Color(0xffffff);\n  col.setHex(Math.random() * 0xffffff);\n  \n  // const m2 = new THREE.MeshLambertMaterial( { color: col } );\n  // const m3 = new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } );\n\n  // const material = new THREE.MeshStandardMaterial( { \n  // color: 0x00ff00 } );\n  const cr = new THREE.Color(\"#\" + Math.floor(Math.random()*16777215).toString(16));\n\n  const m2 = new THREE.MeshStandardMaterial( { \n  color: cr } );\n\n  const box = new THREE.Box3();\n\n  // Create bounding box render\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\n\n  // const cube = new THREE.Mesh( geometry, material );\n  // const cube2 = new THREE.Mesh( geometry, material );\n  // const cube3 = new THREE.Mesh( geometry, m2 );\n\n\n\n  // scene.add(cube);\n  // scene.add(cube2);\n  //scene.add(cube3);\n\n\n  console.log(new THREE.Vector2(renderer.getSize));\n\n  scene.add(bound);\n\n  const controls = new THREE.OrbitControls( camera, renderer.domElement );\n  const rv = new THREE.Vector2(scene.getSize);\n\n  camera.position.z = 15;\n  //camera.position.y = 15;\n\n\n\n  //camera.rotation.z = Math.PI/4;\n  console.log(rv);\n\n  var dx = 0.05;\n  var dy = 0.05;\n  var dz = 0.05;\n\n  var max_cubes = 50;\n  var max_speed = 0.1;\n  var cubes = [];\n\n  //let colorC = (d) => d3.interpolateMagma( parseInt(d) / max_cubes );\n  let colorC = (d) => d3.interpolateTurbo( parseInt(d) / max_cubes );\n\n  function rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  } \n\n  for(var i = 0; i < max_cubes; i++) {\n\n    const material = new THREE.MeshBasicMaterial( { \n      color: colorC(i) } );\n\n    const cube = new THREE.Mesh( geometry, material );\n    cubes[i] = cube;\n\n    cubes[i].dx = Math.sin((Math.random()-0.5)) * max_speed;\n    cubes[i].dy = Math.sin((Math.random()-0.5)) * max_speed;\n    cubes[i].dz = Math.sin((Math.random()-0.5)) * max_speed;\n   \n    scene.add(cube);  \n\n    // cube.position.x = Math.sin(Math.random(max)) * max;\n    // cube.position.y = Math.sin(Math.random(max)) * max;\n    // cube.position.z = Math.sin(Math.random(max)) * max;\n\n  }\n\n\n  function animate() {\n\n\n      cubes.forEach(function(d,idx) {\n\n      //d.rotation.x += dx;\n      //d.rotation.y += dx;\n\n      // if(Math.abs(d.position.x) >= max) dx = -dx;\n      // if(Math.abs(d.position.y) >= max) dy = -dy;\n      // if(Math.abs(d.position.z) >= 1) dz = -dz;\n      //var clr = colorC(idx);\n      //d.material.color.setHex(rgbToHex(clr.r,clr.g,clr.b));\n\n      //d.material.needsUpdate = true;\n\n      // if(Math.abs(d.position.x) >= max) d.position.x = 0;\n      // if(Math.abs(d.position.y) >= max) d.position.y = 0;\n      // if(Math.abs(d.position.z) >= 1) d.position.z = 0;\n\n\n      if(Math.abs(d.position.x) >= max) {\n        d.position.x = 0;\n        d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n\n      }\n      if(Math.abs(d.position.y) >= max) {\n        d.position.y = 0;\n        d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n      }\n      if(Math.abs(d.position.z) >= max) {\n        d.position.z = 0;\n        d.dx = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dy = Math.sin((Math.random()-0.5)) * max_speed;\n        d.dz = Math.sin((Math.random()-0.5)) * max_speed;\n      }\n\n\n      // d.position.x += dx;\n      // d.position.y += dy;\n      // d.position.z += dz;\n\n      d.position.x += d.dx;\n      d.position.y += d.dy;\n      d.position.z += d.dz;\n      //Math.sin(Math.random(max)) * max\n\n    });\n\n\n\n\n    requestAnimationFrame( animate );\n    renderer.render( scene, camera );\n\n  }\n\n  animate();\n\n}\n\n\nwindow.onload = main;\n\n\n\n\n\n\n\n\n\n  return (\n\n    <div className=\"App\">\n      <head>\n      \n        <title>3d Cube</title>\n\n      </head>\n      <body>\n\n      </body>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}