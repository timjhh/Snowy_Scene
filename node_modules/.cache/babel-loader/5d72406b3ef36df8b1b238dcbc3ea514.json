{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as d3 from 'd3';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth / 2, window.innerHeight / 2);\n  document.body.appendChild(renderer.domElement); // Create standard box geometry\n\n  var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n  var planeGeom = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight);\n  var planeMesh = new THREE.MeshBasicMaterial({\n    color: 0xffffff,\n    side: THREE.DoubleSide\n  });\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\n  scene.add(plane);\n  var sphere = new THREE.SphereGeometry(max + 0.25);\n  var object = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    transparent: true,\n    opacity: 0.4\n  }));\n  var box = new THREE.BoxHelper(object); // scene.add(box);\n  // scene.add(object);\n\n  const clock = new THREE.Clock(); // Create bounding box render\n\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial(0xff0000)), 0xffffff); //scene.add(bound);\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  camera.position.z = 15;\n  var dx = 0.05;\n  var dy = 0.05;\n  var dz = 0.05; // scale_len = the length of any major or minor scale\n  //var scale_len = props.scaleRef.current.length;\n  //var max_speed = 0.002;\n  //env.triggerAttack();\n  // for(var i = 0; i < props.numCubes; i++) {\n  //   const material = new THREE.MeshBasicMaterial( { \n  //     color: props.color(i) } );\n  //   const cube = new THREE.Mesh( geometry, material );\n  //   cubes[i] = cube;\n  //   // Random note, pitch and length generation\n  //   let randNote = Math.floor(Math.random() * scale_len);\n  //   let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\n  //   let randLen = 2 ** Math.floor(Math.random() * max_note_len);\n  //   let type_idx = Math.floor(Math.random() * note_types.length);\n  //   cubes[i].minSpeed = props.speedRef.current;\n  //   cubes[i].note = (props.scaleRef.current[randNote] + randPitch);\n  //   cubes[i].note_len = (randLen + note_types[type_idx]);\n  //   cubes[i].synth = new Tone.MembraneSynth();\n  //   //cubes[i].synth = new Tone.FMSynth();\n  //   //cubes[i].synth = new Tone.Synth();\n  //   //cubes[i].synth.chain(vibrato, reverb, compressor, Tone.Destination);\n  //   cubes[i].synth.chain(compressor, Tone.Destination);\n  //   // Define more random values :)\n  //   // Once the cube's counter reaches an arbitrary maximum, switch notes\n  //   cubes[i].counter = 0;\n  //   // How many times can a note repeat before changing\n  //   //cubes[i].max_repeats = (Math.ceil((Math.random() * 8))+1);\n  //   cubes[i].max_repeats = 6;\n  //   cubes[i].dx = cubes[i].minSpeed * (2**(Math.ceil((Math.random() * max_mult))+1));\n  //   cubes[i].dy = 0;\n  //   cubes[i].dz = 0;\n  //   const center = new THREE.Vector3();\n  //   cubes[i].dist = new THREE.Vector3(cubes[i].dx,cubes[i].dy,cubes[i].dz);\n  //   scene.add(cube);  \n  // }\n\n  function animate() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  }\n\n  animate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Snowy Scene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Legend // onChange = {appOnChange()}\n      // modes={modes}\n      // mode={mode}\n      // note={note}\n      // setNote={setNote}\n      // notes={notes}\n      // setMode={setMode}\n      // speedRef={speedRef}\n      // rangeRef={rangeRef}\n      // setNote={setNote}\n      // initAudio={initAudio}\n      // startRef={startRef}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","d3","THREE","OrbitControls","Legend","Cube","Environment","App","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","geometry","BoxGeometry","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","add","sphere","SphereGeometry","max","object","transparent","opacity","box","BoxHelper","clock","Clock","bound","bb","controls","position","z","dx","dy","dz","animate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nfunction App() {\r\n\r\n\r\n\r\n\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize( window.innerWidth/2, window.innerHeight/2 );\r\n  document.body.appendChild( renderer.domElement );\r\n\r\n\r\n  // Create standard box geometry\r\n  var geometry = new THREE.BoxGeometry( 0.5, 0.5, 0.5 );\r\n  var planeGeom = new THREE.PlaneGeometry(window.innerWidth,window.innerHeight);\r\n\r\n\r\n\r\n  var planeMesh = new THREE.MeshBasicMaterial( {color: 0xffffff, side : THREE.DoubleSide })\r\n\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  scene.add(plane);\r\n\r\nvar sphere = new THREE.SphereGeometry(max+0.25);\r\nvar object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial({ color: 0xff0000, transparent: true, opacity: 0.4 }) );\r\nvar box = new THREE.BoxHelper( object );\r\n// scene.add(box);\r\n// scene.add(object);\r\n\r\nconst clock = new THREE.Clock();\r\n\r\n  // Create bounding box render\r\n  const bound = new THREE.BoxHelper(new THREE.Mesh(bb, new THREE.MeshBasicMaterial( 0xff0000 )), 0xffffff);\r\n\r\n  //scene.add(bound);\r\n\r\n  const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n  camera.position.z = 15;\r\n\r\n\r\n  var dx = 0.05;\r\n  var dy = 0.05;\r\n  var dz = 0.05;\r\n\r\n  // scale_len = the length of any major or minor scale\r\n  //var scale_len = props.scaleRef.current.length;\r\n  //var max_speed = 0.002;\r\n\r\n\r\n  //env.triggerAttack();\r\n\r\n  // for(var i = 0; i < props.numCubes; i++) {\r\n\r\n\r\n  //   const material = new THREE.MeshBasicMaterial( { \r\n  //     color: props.color(i) } );\r\n\r\n  //   const cube = new THREE.Mesh( geometry, material );\r\n  //   cubes[i] = cube;\r\n\r\n\r\n  //   // Random note, pitch and length generation\r\n  //   let randNote = Math.floor(Math.random() * scale_len);\r\n  //   let randPitch = Math.floor(Math.random() * max_pitch) + min_pitch;\r\n  //   let randLen = 2 ** Math.floor(Math.random() * max_note_len);\r\n  //   let type_idx = Math.floor(Math.random() * note_types.length);\r\n    \r\n  //   cubes[i].minSpeed = props.speedRef.current;\r\n\r\n  //   cubes[i].note = (props.scaleRef.current[randNote] + randPitch);\r\n\r\n  //   cubes[i].note_len = (randLen + note_types[type_idx]);\r\n\r\n  //   cubes[i].synth = new Tone.MembraneSynth();\r\n  //   //cubes[i].synth = new Tone.FMSynth();\r\n  //   //cubes[i].synth = new Tone.Synth();\r\n\r\n  //   //cubes[i].synth.chain(vibrato, reverb, compressor, Tone.Destination);\r\n  //   cubes[i].synth.chain(compressor, Tone.Destination);\r\n\r\n  //   // Define more random values :)\r\n  //   // Once the cube's counter reaches an arbitrary maximum, switch notes\r\n  //   cubes[i].counter = 0;\r\n\r\n  //   // How many times can a note repeat before changing\r\n  //   //cubes[i].max_repeats = (Math.ceil((Math.random() * 8))+1);\r\n  //   cubes[i].max_repeats = 6;\r\n\r\n  //   cubes[i].dx = cubes[i].minSpeed * (2**(Math.ceil((Math.random() * max_mult))+1));\r\n  //   cubes[i].dy = 0;\r\n  //   cubes[i].dz = 0;\r\n\r\n\r\n  //   const center = new THREE.Vector3();\r\n  //   cubes[i].dist = new THREE.Vector3(cubes[i].dx,cubes[i].dy,cubes[i].dz);\r\n\r\n  //   scene.add(cube);  \r\n\r\n  // }\r\n\r\n    function animate() {\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  animate();\r\n\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    <div className=\"App\">\r\n\r\n{/*        <Cube \r\n          color={colorC}\r\n          numCubes={numCubes}\r\n          tone={Tone}\r\n          scaleRef={scaleRef}\r\n          startRef={startRef}\r\n          speedRef={speedRef}\r\n\r\n        />\r\n\r\n        <Environment />*/}\r\n\r\n        <Legend \r\n          // onChange = {appOnChange()}\r\n          // modes={modes}\r\n          // mode={mode}\r\n          // note={note}\r\n          // setNote={setNote}\r\n          // notes={notes}\r\n          // setMode={setMode}\r\n          // speedRef={speedRef}\r\n          // rangeRef={rangeRef}\r\n          // setNote={setNote}\r\n          // initAudio={initAudio}\r\n          // startRef={startRef}\r\n\r\n          />\r\n\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}