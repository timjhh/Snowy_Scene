{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\timjh\\\\Documents\\\\GitHub\\\\Snowy_Scene\\\\src\\\\App.js\";\nimport './App.css';\nimport * as Tone from 'tone';\nimport React, { useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport $ from 'jquery';\nimport Legend from './Legend.jsx';\nimport Cube from './Cube.jsx';\nimport Environment from './Environment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let scene;\n    let skybox;\n    var stars = [];\n    var snows = [];\n\n    function initScene() {\n      scene = new THREE.Scene(); //scene.background = new THREE.Color( 0x222244 );\n      //scene.add( new THREE.AmbientLight( 0x444444 ) );\n      //scene.fog = new THREE.FogExp2(0xffffff)\n      //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \n      // Create snowy field plane\n\n      let planeGeom = new THREE.PlaneGeometry(5000, 5000); //let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\n\n      let planeMesh = new THREE.MeshPhongMaterial({\n        color: '#8AC',\n        side: THREE.DoubleSide\n      });\n      var plane = new THREE.Mesh(planeGeom, planeMesh); // Rotate to viewable angle\n\n      plane.rotation.x = Math.PI / 2;\n      scene.add(plane);\n      let numStars = 4000;\n      let numSnow = 1000; // Maximum distance star can take\n\n      var max = 10000; // Maximum distnace snow can take\n\n      var maxSnow = 5000; // Range to extend stars around plane\n      // If we generate a # [-100,100], range=10 will\n      // extend the # to [-1000,1000]\n\n      var range = 4; // GENERATE A RANDOM # OF STARS\n\n      for (var i = 0; i < numStars; i++) {\n        let starGeom = new THREE.BoxGeometry(1, 1, 1);\n        let starMat = new THREE.MeshBasicMaterial({\n          color: 0xffffff\n        });\n        let star = new THREE.Mesh(starGeom, starMat);\n        star.position.x = (max / 2 - Math.random() * max) * range; // Only positive values allowed\n\n        star.position.y = Math.random() * max + 4000;\n        star.position.z = (max / 2 - Math.random() * max) * range;\n        star.scale.x = star.scale.y = 8;\n        stars.push(star);\n        scene.add(star);\n      } //let moonGeom = new THREE.SphereGeometry(400, 100, 100);\n\n\n      let moonGeom = new THREE.IcosahedronGeometry(400, 0);\n      let moonMat = new THREE.MeshBasicMaterial({\n        color: 0xF4F6F0\n      });\n      let moon = new THREE.Mesh(moonGeom, moonMat);\n      let color = \"0xffffff\";\n      let intensity = 1;\n      let moonLight = new THREE.DirectionalLight(color, intensity);\n      moonLight.position.set(5000, 5000, 5000);\n      moonLight.target.position.set(0, 0, 0);\n      moon.position.x = 5000;\n      moon.position.y = 5000;\n      moon.position.z = 5000;\n      scene.add(moon);\n      scene.add(moonLight);\n      scene.add(moonLight.target);\n\n      for (var i = 0; i < numSnow; i++) {\n        let snowGeom = new THREE.IcosahedronGeometry(3, 0);\n        let snowMat = new THREE.MeshBasicMaterial({\n          color: 0xffffff\n        });\n        let snow = new THREE.Mesh(snowGeom, snowMat);\n        snow.position.x = maxSnow / 2 - Math.random() * maxSnow; // Only positive values allowed\n\n        snow.position.y = Math.random() * max;\n        snow.position.z = maxSnow / 2 - Math.random() * maxSnow;\n        snows.push(snow);\n        scene.add(snow);\n      } // Leaf color: #015045\n\n\n      let treeBase = new THREE.CylinderGeometry(5, 80, 2000, 32);\n      let treeMat = new THREE.MeshBasicMaterial({\n        color: \"#3b3429\",\n        side: THREE.DoubleSide\n      }); //let treeMat = new THREE.MeshPhongMaterial({color: \"#015045\", side : THREE.DoubleSide});\n\n      let tree = new THREE.Mesh(treeBase, treeMat);\n      let maxLeaves = 4;\n\n      for (var i = 1; i <= maxLeaves; i++) {\n        let leafGeom = new THREE.OctahedronGeometry(i * 15, 0);\n        let leafMat = new THREE.MeshLambertMaterial({\n          color: \"#015045\"\n        });\n        let leaf = new THREE.Mesh(leafGeom, leafMat);\n        leaf.position.x = 500;\n        leaf.position.y = 1 / maxLeaves;\n        leaf.position.z = 300;\n      }\n\n      tree.position.x = 500;\n      tree.position.z = 300;\n      scene.add(tree); // Some additional geometry ??\n\n      let sqGeom = new THREE.BoxGeometry(80, 80, 80);\n      let sqMat = new THREE.MeshBasicMaterial({\n        color: 0x000000\n      });\n      let sq = new THREE.Mesh(sqGeom, sqMat);\n      sq.position.x = 500;\n      sq.position.y = 0;\n      sq.position.z = 0;\n      scene.add(sq);\n    }\n\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 20000);\n    camera.position.set(0, 5000, 0);\n    camera.lookAt(5000, 5000, 5000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.maxPolarAngle = Math.PI * 0.495;\n    controls.target.set(0, 500, 0);\n    controls.minDistance = 40.0;\n    controls.maxDistance = 200.0;\n    controls.update();\n    const clock = new THREE.Clock();\n    camera.position.z = 15;\n    initScene();\n\n    function animate() {\n      snows.forEach(d => {\n        d.position.y <= 0 ? d.position.y = 1000 : d.position.y -= 0.5;\n      });\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    } // Call animate method and get this gravy train rolling!\n\n\n    window.addEventListener('resize', onWindowResize, false);\n    animate();\n    document.body.appendChild(renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"head\", {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Snowy Scene\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        id: \"App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/timjh/Documents/GitHub/Snowy_Scene/src/App.js"],"names":["Tone","React","useState","THREE","OrbitControls","$","Legend","Cube","Environment","App","Component","constructor","props","componentDidMount","scene","skybox","stars","snows","initScene","Scene","planeGeom","PlaneGeometry","planeMesh","MeshPhongMaterial","color","side","DoubleSide","plane","Mesh","rotation","x","Math","PI","add","numStars","numSnow","max","maxSnow","range","i","starGeom","BoxGeometry","starMat","MeshBasicMaterial","star","position","random","y","z","scale","push","moonGeom","IcosahedronGeometry","moonMat","moon","intensity","moonLight","DirectionalLight","set","target","snowGeom","snowMat","snow","treeBase","CylinderGeometry","treeMat","tree","maxLeaves","leafGeom","OctahedronGeometry","leafMat","MeshLambertMaterial","leaf","sqGeom","sqMat","sq","camera","PerspectiveCamera","window","innerWidth","innerHeight","lookAt","renderer","WebGLRenderer","antialias","setSize","toneMapping","ACESFilmicToneMapping","setPixelRatio","devicePixelRatio","controls","domElement","maxPolarAngle","minDistance","maxDistance","update","clock","Clock","animate","forEach","d","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","addEventListener","document","body","appendChild"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport * as Tone from 'tone'\r\nimport React, { useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport $ from 'jquery';\r\n\r\nimport Legend from './Legend.jsx';\r\nimport Cube from './Cube.jsx';\r\nimport Environment from './Environment.jsx';\r\nclass App extends React.Component {\r\n\r\nconstructor(props) {\r\n  super(props);\r\n\r\n}\r\n\r\ncomponentDidMount() {\r\n\r\n\r\nlet scene;\r\nlet skybox;\r\nvar stars = [];\r\nvar snows = [];\r\n\r\n\r\n\r\nfunction initScene() {\r\n\r\n  scene = new THREE.Scene();\r\n  //scene.background = new THREE.Color( 0x222244 );\r\n  //scene.add( new THREE.AmbientLight( 0x444444 ) );\r\n  //scene.fog = new THREE.FogExp2(0xffffff)\r\n  //scene.fog = new THREE.Fog( 0x000000, 4000, 8000 ); \r\n\r\n  // Create snowy field plane\r\n  let planeGeom = new THREE.PlaneGeometry(5000,5000);\r\n  //let planeMesh = new THREE.MeshBasicMaterial( {color: 0xc2bfb8, side : THREE.DoubleSide })\r\n  let planeMesh = new THREE.MeshPhongMaterial({color: '#8AC', side : THREE.DoubleSide});\r\n\r\n  var plane = new THREE.Mesh(planeGeom, planeMesh);\r\n\r\n  // Rotate to viewable angle\r\n  plane.rotation.x = Math.PI / 2;\r\n\r\n  scene.add(plane);\r\n\r\n\r\n\r\n\r\n  let numStars = 4000;\r\n  let numSnow = 1000;\r\n\r\n\r\n  // Maximum distance star can take\r\n  var max = 10000;\r\n\r\n  // Maximum distnace snow can take\r\n  var maxSnow = 5000;\r\n\r\n\r\n\r\n  // Range to extend stars around plane\r\n  // If we generate a # [-100,100], range=10 will\r\n  // extend the # to [-1000,1000]\r\n  var range = 4;\r\n\r\n  // GENERATE A RANDOM # OF STARS\r\n  for(var i = 0; i < numStars; i++) {\r\n\r\n\r\n    let starGeom = new THREE.BoxGeometry(1, 1, 1);\r\n    let starMat = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n    let star = new THREE.Mesh(starGeom, starMat);\r\n\r\n    \r\n    star.position.x = ((max/2) - (Math.random() * max)) * range;\r\n\r\n    // Only positive values allowed\r\n    star.position.y = (Math.random() * max) + 4000;\r\n    \r\n\r\n    star.position.z = ((max/2) - (Math.random() * max)) * range;\r\n    \r\n\r\n    star.scale.x = star.scale.y = 8;\r\n\r\n    stars.push(star);\r\n    scene.add(star);\r\n\r\n  }\r\n\r\n  //let moonGeom = new THREE.SphereGeometry(400, 100, 100);\r\n  let moonGeom = new THREE.IcosahedronGeometry(400, 0);\r\n  let moonMat = new THREE.MeshBasicMaterial({color: 0xF4F6F0});\r\n  let moon = new THREE.Mesh(moonGeom, moonMat);\r\n\r\n  let color = \"0xffffff\";\r\n  let intensity = 1;\r\n\r\n  let moonLight = new THREE.DirectionalLight(color,intensity);\r\n  moonLight.position.set(5000,5000,5000);\r\n  moonLight.target.position.set(0,0,0);\r\n\r\n  moon.position.x = 5000;\r\n  moon.position.y = 5000;\r\n  moon.position.z = 5000;\r\n\r\n  scene.add(moon);\r\n  scene.add(moonLight);\r\n  scene.add(moonLight.target);\r\n\r\n  for(var i = 0 ; i < numSnow; i++) {\r\n\r\n    let snowGeom = new THREE.IcosahedronGeometry(3, 0);\r\n    let snowMat = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n    let snow = new THREE.Mesh(snowGeom, snowMat);\r\n\r\n\r\n    snow.position.x = ((maxSnow/2) - (Math.random() * maxSnow));\r\n\r\n    // Only positive values allowed\r\n    snow.position.y = (Math.random() * max);\r\n    \r\n\r\n    snow.position.z = ((maxSnow/2) - (Math.random() * maxSnow));\r\n\r\n\r\n    snows.push(snow);\r\n    scene.add(snow);\r\n\r\n  }\r\n\r\n\r\n  // Leaf color: #015045\r\n  let treeBase = new THREE.CylinderGeometry(5, 80, 2000, 32);\r\n  let treeMat = new THREE.MeshBasicMaterial( {color: \"#3b3429\", side : THREE.DoubleSide });\r\n  //let treeMat = new THREE.MeshPhongMaterial({color: \"#015045\", side : THREE.DoubleSide});\r\n  let tree = new THREE.Mesh(treeBase, treeMat);\r\n\r\n  let maxLeaves = 4;\r\n  for(var i = 1; i <= maxLeaves; i++) {\r\n    let leafGeom = new THREE.OctahedronGeometry(i*15, 0);\r\n    let leafMat = new THREE.MeshLambertMaterial({color: \"#015045\"});\r\n\r\n    let leaf = new THREE.Mesh(leafGeom, leafMat);\r\n\r\n    leaf.position.x = 500;\r\n    leaf.position.y = (1/maxLeaves)\r\n    leaf.position.z = 300;\r\n\r\n  }\r\n\r\n  tree.position.x = 500;\r\n  tree.position.z = 300;\r\n\r\n  scene.add(tree);\r\n\r\n\r\n  // Some additional geometry ??\r\n  let sqGeom = new THREE.BoxGeometry(80, 80, 80);\r\n  let sqMat = new THREE.MeshBasicMaterial({color: 0x000000});\r\n  let sq = new THREE.Mesh(sqGeom, sqMat);\r\n\r\n  sq.position.x = 500;\r\n  sq.position.y = 0;\r\n  sq.position.z = 0;\r\n\r\n  scene.add(sq);\r\n\r\n}\r\n  \r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 20000 );\r\n\r\n    camera.position.set(0,5000,0);\r\n    camera.lookAt(5000,5000,5000);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\r\n\r\n\r\n\r\n\r\n    const controls = new OrbitControls( camera, renderer.domElement );\r\n    controls.maxPolarAngle = Math.PI * 0.495;\r\n    controls.target.set( 0, 500, 0 );\r\n    controls.minDistance = 40.0;\r\n    controls.maxDistance = 200.0;\r\n    controls.update();\r\n\r\n\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n\r\n\r\n    camera.position.z = 15;\r\n\r\n    initScene();\r\n\r\n\r\n\r\n\r\n    function animate() {\r\n\r\n\r\n    snows.forEach(d => {\r\n\r\n      \r\n      d.position.y <= 0 ? d.position.y = 1000 : d.position.y-=0.5; \r\n\r\n    });\r\n\r\n    renderer.render( scene, camera );\r\n    requestAnimationFrame( animate );\r\n\r\n  }\r\n\r\n  function onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  // Call animate method and get this gravy train rolling!\r\n  window.addEventListener('resize', onWindowResize, false);\r\n  animate();\r\n\r\n    document.body.appendChild( renderer.domElement );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n  return (\r\n    <>\r\n    <head>\r\n\r\n      <title>Snowy Scene</title>\r\n\r\n    </head>\r\n\r\n    \r\n    <div className=\"App\" id=\"App\">\r\n\r\n\r\n\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}